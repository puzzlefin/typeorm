{"version":3,"sources":["../browser/src/entity-manager/MongoEntityManager.ts"],"names":[],"mappings":"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","file":"MongoEntityManager.js","sourcesContent":["import { Connection } from \"../connection/Connection\";\nimport { EntityManager } from \"./EntityManager\";\nimport { EntityTarget } from \"../common/EntityTarget\";\nimport {\n    AggregationCursor,\n    BulkWriteOpResultObject,\n    ChangeStream,\n    ChangeStreamOptions,\n    Code,\n    Collection,\n    CollectionAggregationOptions,\n    CollectionBulkWriteOptions,\n    CollectionInsertManyOptions,\n    CollectionInsertOneOptions,\n    CollectionOptions,\n    CollStats,\n    CommandCursor,\n    Cursor,\n    CursorResult,\n    DeleteWriteOpResultObject,\n    FindAndModifyWriteOpResultObject,\n    FindOneAndReplaceOption,\n    GeoHaystackSearchOptions,\n    GeoNearOptions,\n    InsertOneWriteOpResult,\n    InsertWriteOpResult,\n    MapReduceOptions,\n    MongoCallback,\n    MongoCountPreferences,\n    MongodbIndexOptions,\n    MongoError,\n    ObjectID,\n    OrderedBulkOperation,\n    ParallelCollectionScanOptions,\n    ReadPreference,\n    ReplaceOneOptions,\n    UnorderedBulkOperation,\n    UpdateWriteOpResult\n} from \"../driver/mongodb/typings\";\nimport { ObjectLiteral } from \"../common/ObjectLiteral\";\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { DocumentToEntityTransformer } from \"../query-builder/transformer/DocumentToEntityTransformer\";\nimport { FindManyOptions } from \"../find-options/FindManyOptions\";\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\";\nimport { FindOneOptions } from \"../find-options/FindOneOptions\";\nimport { PlatformTools } from \"../platform/PlatformTools\";\nimport { DeepPartial } from \"../common/DeepPartial\";\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\";\nimport { InsertResult } from \"../query-builder/result/InsertResult\";\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\";\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\";\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { FindConditions } from \"../index\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n *\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\n */\nexport class MongoEntityManager extends EntityManager {\n\n    get mongoQueryRunner(): MongoQueryRunner {\n        return (this.connection.driver as MongoDriver).queryRunner as MongoQueryRunner;\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n    }\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(entityClassOrName: EntityTarget<Entity>, optionsOrConditions?: FindManyOptions<Entity> | Partial<Entity>): Promise<Entity[]> {\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(this.convertFindOptionsSelectToProjectCriteria(optionsOrConditions.select));\n            if (optionsOrConditions.skip)\n                cursor.skip(optionsOrConditions.skip);\n            if (optionsOrConditions.take)\n                cursor.limit(optionsOrConditions.take);\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n        return cursor.toArray();\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(entityClassOrName: EntityTarget<Entity>, optionsOrConditions?: FindManyOptions<Entity> | Partial<Entity>): Promise<[Entity[], number]> {\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(this.convertFindOptionsSelectToProjectCriteria(optionsOrConditions.select));\n            if (optionsOrConditions.skip)\n                cursor.skip(optionsOrConditions.skip);\n            if (optionsOrConditions.take)\n                cursor.limit(optionsOrConditions.take);\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n\n        }\n        const [results, count] = await Promise.all<any>([\n            cursor.toArray(),\n            this.count(entityClassOrName, query),\n        ]);\n        return [results, parseInt(count)];\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    async findByIds<Entity>(entityClassOrName: EntityTarget<Entity>, ids: any[], optionsOrConditions?: FindManyOptions<Entity> | Partial<Entity>): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID;\n        query[\"_id\"] = {\n            $in: ids.map(id => {\n                if (id instanceof objectIdInstance)\n                    return id;\n\n                return id[metadata.objectIdColumn!.propertyName];\n            })\n        };\n\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(this.convertFindOptionsSelectToProjectCriteria(optionsOrConditions.select));\n            if (optionsOrConditions.skip)\n                cursor.skip(optionsOrConditions.skip);\n            if (optionsOrConditions.take)\n                cursor.limit(optionsOrConditions.take);\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n        return await cursor.toArray();\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    async findOne<Entity>(entityClassOrName: EntityTarget<Entity>,\n                          optionsOrConditions?: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindOneOptions<Entity> | DeepPartial<Entity>,\n                          maybeOptions?: FindOneOptions<Entity>): Promise<Entity | undefined> {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID;\n        const id = (optionsOrConditions instanceof objectIdInstance) || typeof optionsOrConditions === \"string\" ? optionsOrConditions : undefined;\n        const findOneOptionsOrConditions = (id ? maybeOptions : optionsOrConditions) as any;\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(findOneOptionsOrConditions) || {};\n        if (id) {\n            query[\"_id\"] = (id instanceof objectIdInstance) ? id : new objectIdInstance(id);\n        }\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindOneOptions(findOneOptionsOrConditions)) {\n            if (findOneOptionsOrConditions.select)\n                cursor.project(this.convertFindOptionsSelectToProjectCriteria(findOneOptionsOrConditions.select));\n            if (findOneOptionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(findOneOptionsOrConditions.order));\n        }\n\n        // const result = await cursor.limit(1).next();\n        const result = await cursor.limit(1).toArray();\n        return result.length > 0 ? result[0] : undefined;\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(target: EntityTarget<Entity>, entity: QueryDeepPartialEntity<Entity> | QueryDeepPartialEntity<Entity>[]): Promise<InsertResult> {\n        // todo: convert entity to its database name\n        const result = new InsertResult();\n        if (Array.isArray(entity)) {\n            result.raw = await this.insertMany(target, entity);\n            Object.keys(result.raw.insertedIds).forEach((key: any) => {\n                let insertedId = result.raw.insertedIds[key];\n                result.generatedMaps.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), insertedId)!);\n                result.identifiers.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), insertedId)!);\n            });\n\n        } else {\n            result.raw = await this.insertOne(target, entity);\n            result.generatedMaps.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), result.raw.insertedId)!);\n            result.identifiers.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), result.raw.insertedId)!);\n        }\n\n        return result;\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    async update<Entity>(target: EntityTarget<Entity>, criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindConditions<Entity>, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult> {\n        if (Array.isArray(criteria)) {\n            await Promise.all((criteria as any[]).map(criteriaItem => {\n                return this.update(target, criteriaItem, partialEntity);\n            }));\n\n        } else {\n            const metadata = this.connection.getMetadata(target);\n            await this.updateOne(target, this.convertMixedCriteria(metadata, criteria), { $set: partialEntity });\n        }\n\n        return new UpdateResult();\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async delete<Entity>(target: EntityTarget<Entity>, criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindConditions<Entity>): Promise<DeleteResult> {\n        if (Array.isArray(criteria)) {\n            await Promise.all((criteria as any[]).map(criteriaItem => {\n                return this.delete(target, criteriaItem);\n            }));\n\n        } else {\n            await this.deleteOne(target, this.convertMixedCriteria(this.connection.getMetadata(target), criteria));\n        }\n\n        return new DeleteResult();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<Entity, T = any>(entityClassOrName: EntityTarget<Entity>, query?: ObjectLiteral): Cursor<T> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.cursor(metadata.tableName, query);\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor<Entity>(entityClassOrName: EntityTarget<Entity>, query?: ObjectLiteral): Cursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        const cursor = this.createCursor(entityClassOrName, query);\n        this.applyEntityTransformationToCursor(metadata, cursor);\n        return cursor;\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<Entity, R = any>(entityClassOrName: EntityTarget<Entity>, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<R> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.aggregate(metadata.tableName, pipeline, options);\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity<Entity>(entityClassOrName: EntityTarget<Entity>, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        const cursor = this.mongoQueryRunner.aggregate(metadata.tableName, pipeline, options);\n        this.applyEntityTransformationToCursor(metadata, cursor);\n        return cursor;\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite<Entity>(entityClassOrName: EntityTarget<Entity>, operations: ObjectLiteral[], options?: CollectionBulkWriteOptions): Promise<BulkWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.bulkWrite(metadata.tableName, operations, options);\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count<Entity>(entityClassOrName: EntityTarget<Entity>, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.count(metadata.tableName, query, options);\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex<Entity>(entityClassOrName: EntityTarget<Entity>, fieldOrSpec: string | any, options?: MongodbIndexOptions): Promise<string> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.createCollectionIndex(metadata.tableName, fieldOrSpec, options);\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes<Entity>(entityClassOrName: EntityTarget<Entity>, indexSpecs: ObjectLiteral[]): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.createCollectionIndexes(metadata.tableName, indexSpecs);\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.deleteMany(metadata.tableName, query, options);\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.deleteOne(metadata.tableName, query, options);\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct<Entity>(entityClassOrName: EntityTarget<Entity>, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.distinct(metadata.tableName, key, query, options);\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex<Entity>(entityClassOrName: EntityTarget<Entity>, indexName: string, options?: CollectionOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.dropCollectionIndex(metadata.tableName, indexName, options);\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.dropCollectionIndexes(metadata.tableName);\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.findOneAndDelete(metadata.tableName, query, options);\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.findOneAndUpdate(metadata.tableName, query, update, options);\n    }\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     */\n    geoHaystackSearch<Entity>(entityClassOrName: EntityTarget<Entity>, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.geoHaystackSearch(metadata.tableName, x, y, options);\n    }\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     */\n    geoNear<Entity>(entityClassOrName: EntityTarget<Entity>, x: number, y: number, options?: GeoNearOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.geoNear(metadata.tableName, x, y, options);\n    }\n\n    /**\n     * Run a group command across a collection.\n     */\n    group<Entity>(entityClassOrName: EntityTarget<Entity>, keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.group(metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.collectionIndexes(metadata.tableName);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists<Entity>(entityClassOrName: EntityTarget<Entity>, indexes: string | string[]): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.collectionIndexExists(metadata.tableName, indexes);\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation<Entity>(entityClassOrName: EntityTarget<Entity>, options?: { full: boolean }): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.collectionIndexInformation(metadata.tableName, options);\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp<Entity>(entityClassOrName: EntityTarget<Entity>, options?: CollectionOptions): OrderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.initializeOrderedBulkOp(metadata.tableName, options);\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp<Entity>(entityClassOrName: EntityTarget<Entity>, options?: CollectionOptions): UnorderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.initializeUnorderedBulkOp(metadata.tableName, options);\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany<Entity>(entityClassOrName: EntityTarget<Entity>, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.insertMany(metadata.tableName, docs, options);\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne<Entity>(entityClassOrName: EntityTarget<Entity>, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.insertOne(metadata.tableName, doc, options);\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.isCapped(metadata.tableName);\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes<Entity>(entityClassOrName: EntityTarget<Entity>, options?: { batchSize?: number, readPreference?: ReadPreference | string }): CommandCursor {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.listCollectionIndexes(metadata.tableName, options);\n    }\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     */\n    mapReduce<Entity>(entityClassOrName: EntityTarget<Entity>, map: Function | string, reduce: Function | string, options?: MapReduceOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.mapReduce(metadata.tableName, map, reduce, options);\n    }\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\n     * There are no ordering guarantees for returned results.\n     */\n    parallelCollectionScan<Entity>(entityClassOrName: EntityTarget<Entity>, options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.parallelCollectionScan(metadata.tableName, options);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    reIndex<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.reIndex(metadata.tableName);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename<Entity>(entityClassOrName: EntityTarget<Entity>, newName: string, options?: { dropTarget?: boolean }): Promise<Collection<any>> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.rename(metadata.tableName, newName, options);\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.replaceOne(metadata.tableName, query, doc, options);\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats<Entity>(entityClassOrName: EntityTarget<Entity>, options?: { scale: number }): Promise<CollStats> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.stats(metadata.tableName, options);\n    }\n\n    watch<Entity>(entityClassOrName: EntityTarget<Entity>, pipeline?: Object[], options?: ChangeStreamOptions): ChangeStream {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.watch(metadata.tableName, pipeline, options);\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.updateMany(metadata.tableName, query, update, options);\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne<Entity>(entityClassOrName: EntityTarget<Entity>, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.mongoQueryRunner.updateOne(metadata.tableName, query, update, options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts FindManyOptions to mongodb query.\n     */\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindManyOptions<Entity> | Partial<Entity> | undefined): ObjectLiteral | undefined {\n        if (!optionsOrConditions)\n            return undefined;\n\n        if (FindOptionsUtils.isFindManyOptions<Entity>(optionsOrConditions))\n        // If where condition is passed as a string which contains sql we have to ignore\n        // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where;\n\n        return optionsOrConditions;\n    }\n\n    /**\n     * Converts FindOneOptions to mongodb query.\n     */\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindOneOptions<Entity> | Partial<Entity> | undefined): ObjectLiteral | undefined {\n        if (!optionsOrConditions)\n            return undefined;\n\n        if (FindOptionsUtils.isFindOneOptions<Entity>(optionsOrConditions))\n        // If where condition is passed as a string which contains sql we have to ignore\n        // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where;\n\n        return optionsOrConditions;\n    }\n\n    /**\n     * Converts FindOptions into mongodb order by criteria.\n     */\n    protected convertFindOptionsOrderToOrderCriteria(order: ObjectLiteral) {\n        return Object.keys(order).reduce((orderCriteria, key) => {\n            switch (order[key]) {\n                case \"DESC\":\n                    orderCriteria[key] = -1;\n                    break;\n                case \"ASC\":\n                    orderCriteria[key] = 1;\n                    break;\n                default:\n                    orderCriteria[key] = order[key];\n            }\n            return orderCriteria;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Converts FindOptions into mongodb select by criteria.\n     */\n    protected convertFindOptionsSelectToProjectCriteria(selects: (keyof any)[]) {\n        return selects.reduce((projectCriteria, key) => {\n            projectCriteria[key] = 1;\n            return projectCriteria;\n        }, {} as any);\n    }\n\n    /**\n     * Ensures given id is an id for query.\n     */\n    protected convertMixedCriteria(metadata: EntityMetadata, idMap: any): ObjectLiteral {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID;\n\n        // check first if it's ObjectId compatible:\n        // string, number, Buffer, ObjectId or ObjectId-like\n        if (objectIdInstance.isValid(idMap)) {\n            return {\n                \"_id\": new objectIdInstance(idMap)\n            };\n        }\n\n        // if it's some other type of object build a query from the columns\n        // this check needs to be after the ObjectId check, because a valid ObjectId is also an Object instance\n        if (idMap instanceof Object) {\n            return metadata.columns.reduce((query, column) => {\n                const columnValue = column.getEntityValue(idMap);\n                if (columnValue !== undefined)\n                    query[column.databasePath] = columnValue;\n                return query;\n            }, {} as any);\n        }\n\n        // last resort: try to convert it to an ObjectID anyway\n        // most likely it will fail, but we want to be backwards compatible and keep the same thrown Errors.\n        // it can still pass with null/undefined\n        return {\n            \"_id\": new objectIdInstance(idMap)\n        };\n    }\n\n    /**\n     * Overrides cursor's toArray and next methods to convert results to entity automatically.\n     */\n    protected applyEntityTransformationToCursor<Entity extends ObjectLiteral>(metadata: EntityMetadata, cursor: Cursor<Entity> | AggregationCursor<Entity>) {\n        const ParentCursor = PlatformTools.load(\"mongodb\").Cursor;\n        const queryRunner = this.mongoQueryRunner;\n        cursor.toArray = function (callback?: MongoCallback<Entity[]>) {\n            if (callback) {\n                ParentCursor.prototype.toArray.call(this, (error: MongoError, results: Entity[]): void => {\n                    if (error) {\n                        callback(error, results);\n                        return;\n                    }\n\n                    const transformer = new DocumentToEntityTransformer();\n                    const entities = transformer.transformAll(results, metadata);\n\n                    // broadcast \"load\" events\n                    const broadcastResult = new BroadcasterResult();\n                    queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, entities);\n\n                    Promise.all(broadcastResult.promises).then(() => callback(error, entities));\n                });\n            } else {\n                return ParentCursor.prototype.toArray.call(this).then((results: Entity[]) => {\n                    const transformer = new DocumentToEntityTransformer();\n                    const entities = transformer.transformAll(results, metadata);\n\n                    // broadcast \"load\" events\n                    const broadcastResult = new BroadcasterResult();\n                    queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, entities);\n\n                    return Promise.all(broadcastResult.promises).then(() => entities);\n                });\n            }\n        };\n        cursor.next = function (callback?: MongoCallback<CursorResult>) {\n            if (callback) {\n                ParentCursor.prototype.next.call(this, (error: MongoError, result: CursorResult): void => {\n                    if (error || !result) {\n                        callback(error, result);\n                        return;\n                    }\n\n                    const transformer = new DocumentToEntityTransformer();\n                    const entity = transformer.transform(result, metadata);\n\n                    // broadcast \"load\" events\n                    const broadcastResult = new BroadcasterResult();\n                    queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, [entity]);\n\n                    Promise.all(broadcastResult.promises).then(() => callback(error, entity));\n                });\n            } else {\n                return ParentCursor.prototype.next.call(this).then((result: Entity) => {\n                    if (!result) return result;\n\n                    const transformer = new DocumentToEntityTransformer();\n                    const entity = transformer.transform(result, metadata);\n\n                    // broadcast \"load\" events\n                    const broadcastResult = new BroadcasterResult();\n                    queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, [entity]);\n\n                    return Promise.all(broadcastResult.promises).then(() => entity);\n                });\n            }\n        };\n    }\n\n}\n"],"sourceRoot":".."}