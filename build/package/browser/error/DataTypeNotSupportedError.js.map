{"version":3,"sources":["../browser/src/error/DataTypeNotSupportedError.ts"],"names":[],"mappings":"AAIA,MAAM,OAAO,yBAA0B,SAAQ,KAAK;IAGhD,YAAY,MAAsB,EAAE,QAAoB,EAAE,QAAuB;QAC7E,KAAK,EAAE,CAAC;QAHZ,SAAI,GAAG,2BAA2B,CAAC;QAI/B,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,yBAAyB,CAAC,SAAS,CAAC,CAAC;QACjE,MAAM,IAAI,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAO,QAAS,CAAC,IAAI,CAAC;QAC5E,IAAI,CAAC,OAAO,GAAG,cAAc,IAAI,SAAS,MAAM,CAAC,cAAc,CAAC,UAAU,IAAI,MAAM,CAAC,YAAY,0BAA0B,QAAQ,aAAa,CAAC;IACrJ,CAAC;CAEJ","file":"DataTypeNotSupportedError.js","sourcesContent":["import {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {DatabaseType} from \"../driver/types/DatabaseType\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\n\nexport class DataTypeNotSupportedError extends Error {\n    name = \"DataTypeNotSupportedError\";\n\n    constructor(column: ColumnMetadata, dataType: ColumnType, database?: DatabaseType) {\n        super();\n        Object.setPrototypeOf(this, DataTypeNotSupportedError.prototype);\n        const type = typeof dataType === \"string\" ? dataType : (<any>dataType).name;\n        this.message = `Data type \"${type}\" in \"${column.entityMetadata.targetName}.${column.propertyName}\" is not supported by \"${database}\" database.`;\n    }\n\n}"],"sourceRoot":".."}