{"version":3,"sources":["../browser/src/error/UsingJoinTableOnlyOnOneSideAllowedError.ts"],"names":[],"mappings":"AAGA;GACG;AACH,MAAM,OAAO,uCAAwC,SAAQ,KAAK;IAG9D,YAAY,cAA8B,EAAE,QAA0B;QAClE,KAAK,EAAE,CAAC;QAHZ,SAAI,GAAG,yCAAyC,CAAC;QAI7C,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,uCAAuC,CAAC,SAAS,CAAC,CAAC;QAC/E,IAAI,CAAC,OAAO,GAAG,gFAAgF;YAC3F,QAAQ,cAAc,CAAC,IAAI,IAAI,QAAQ,CAAC,YAAY,QAAQ,QAAQ,CAAC,qBAAqB,CAAC,IAAI,IAAI,QAAQ,CAAC,eAAgB,CAAC,YAAY,GAAG;YAC5I,wFAAwF,CAAC;IACjG,CAAC;CAEJ","file":"UsingJoinTableOnlyOnOneSideAllowedError.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinTableOnlyOnOneSideAllowedError extends Error {\n    name = \"UsingJoinTableOnlyOnOneSideAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        Object.setPrototypeOf(this, UsingJoinTableOnlyOnOneSideAllowedError.prototype);\n        this.message = `Using JoinTable is allowed only on one side of the many-to-many relationship. ` +\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation!.propertyName} ` +\n            `has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.`;\n    }\n\n}"],"sourceRoot":".."}