{"version":3,"sources":["../browser/src/error/ColumnTypeUndefinedError.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,OAAO,wBAAyB,SAAQ,KAAK;IAG/C,YAAY,MAAc,EAAE,YAAoB;QAC5C,KAAK,EAAE,CAAC;QAHZ,SAAI,GAAG,0BAA0B,CAAC;QAI9B,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,wBAAwB,CAAC,SAAS,CAAC,CAAC;QAChE,IAAI,CAAC,OAAO,GAAG,mBAAmB,MAAM,CAAC,WAAW,CAAC,IAAI,IAAI,YAAY,yCAAyC;YAC9G,yFAAyF;YACzF,qIAAqI;YACrI,8FAA8F,CAAC;IACvG,CAAC;CAEJ","file":"ColumnTypeUndefinedError.js","sourcesContent":["/**\n * Thrown when ORM cannot get column's type automatically.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class ColumnTypeUndefinedError extends Error {\n    name = \"ColumnTypeUndefinedError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        Object.setPrototypeOf(this, ColumnTypeUndefinedError.prototype);\n        this.message = `Column type for ${object.constructor.name}#${propertyName} is not defined and cannot be guessed. ` +\n            `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` +\n            `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application (before any entity imported).` +\n            `If you are using JavaScript instead of TypeScript you must explicitly provide a column type.`;\n    }\n\n}"],"sourceRoot":".."}