{"version":3,"sources":["../browser/src/error/UsingJoinColumnIsNotAllowedError.ts"],"names":[],"mappings":"AAGA;GACG;AACH,MAAM,OAAO,gCAAiC,SAAQ,KAAK;IAGvD,YAAY,cAA8B,EAAE,QAA0B;QAClE,KAAK,EAAE,CAAC;QAHZ,SAAI,GAAG,kCAAkC,CAAC;QAItC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,gCAAgC,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,OAAO,GAAG,uBAAuB,cAAc,CAAC,IAAI,IAAI,QAAQ,CAAC,YAAY,aAAa;YAC3F,sEAAsE,CAAC;IAC/E,CAAC;CAEJ","file":"UsingJoinColumnIsNotAllowedError.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinColumnIsNotAllowedError extends Error {\n    name = \"UsingJoinColumnIsNotAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        Object.setPrototypeOf(this, UsingJoinColumnIsNotAllowedError.prototype);\n        this.message = `Using JoinColumn on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\n            `You can use JoinColumn only on one-to-one and many-to-one relations.`;\n    }\n\n}"],"sourceRoot":".."}