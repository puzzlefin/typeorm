{"version":3,"sources":["../browser/src/error/UsingJoinColumnOnlyOnOneSideAllowedError.ts"],"names":[],"mappings":"AAGA;GACG;AACH,MAAM,OAAO,wCAAyC,SAAQ,KAAK;IAG/D,YAAY,cAA8B,EAAE,QAA0B;QAClE,KAAK,EAAE,CAAC;QAHZ,SAAI,GAAG,0CAA0C,CAAC;QAI9C,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,wCAAwC,CAAC,SAAS,CAAC,CAAC;QAChF,IAAI,CAAC,OAAO,GAAG,+EAA+E;YAC1F,QAAQ,cAAc,CAAC,IAAI,IAAI,QAAQ,CAAC,YAAY,QAAQ,QAAQ,CAAC,qBAAqB,CAAC,IAAI,IAAI,QAAQ,CAAC,eAAgB,CAAC,YAAY,GAAG;YAC5I,uFAAuF,CAAC;IAChG,CAAC;CAEJ","file":"UsingJoinColumnOnlyOnOneSideAllowedError.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinColumnOnlyOnOneSideAllowedError extends Error {\n    name = \"UsingJoinColumnOnlyOnOneSideAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        Object.setPrototypeOf(this, UsingJoinColumnOnlyOnOneSideAllowedError.prototype);\n        this.message = `Using JoinColumn is allowed only on one side of the one-to-one relationship. ` +\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation!.propertyName} ` +\n            `has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`;\n    }\n\n}"],"sourceRoot":".."}