{"version":3,"sources":["../browser/src/cache/DbQueryResultCache.ts"],"names":[],"mappings":"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","file":"DbQueryResultCache.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Connection} from \"../connection/Connection\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {MssqlParameter} from \"../driver/sqlserver/MssqlParameter\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Table} from \"../schema-builder/table/Table\";\nimport {QueryResultCache} from \"./QueryResultCache\";\nimport {QueryResultCacheOptions} from \"./QueryResultCacheOptions\";\n\n/**\n * Caches query result into current database, into separate table called \"query-result-cache\".\n */\nexport class DbQueryResultCache implements QueryResultCache {\n\n    // -------------------------------------------------------------------------\n    // Private properties\n    // -------------------------------------------------------------------------\n\n    private queryResultCacheTable: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        const cacheOptions = typeof this.connection.options.cache === \"object\" ? this.connection.options.cache : {};\n        const cacheTableName = cacheOptions.tableName || \"query-result-cache\";\n\n        this.queryResultCacheTable = this.connection.driver.buildTableName(cacheTableName, options.schema, options.database);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a connection with given cache provider.\n     */\n    async connect(): Promise<void> {\n    }\n\n    /**\n     * Disconnects with given cache provider.\n     */\n    async disconnect(): Promise<void> {\n    }\n\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    async synchronize(queryRunner?: QueryRunner): Promise<void> {\n        queryRunner = this.getQueryRunner(queryRunner);\n        const driver = this.connection.driver;\n        const tableExist = await queryRunner.hasTable(this.queryResultCacheTable); // todo: table name should be configurable\n        if (tableExist)\n            return;\n\n        await queryRunner.createTable(new Table(\n            {\n                name: this.queryResultCacheTable,\n                columns: [\n                    {\n                        name: \"id\",\n                        isPrimary: true,\n                        isNullable: false,\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheId}),\n                        generationStrategy: \"increment\",\n                        isGenerated: true\n                    },\n                    {\n                        name: \"identifier\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheIdentifier}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"time\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheTime}),\n                        isPrimary: false,\n                        isNullable: false\n                    },\n                    {\n                        name: \"duration\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheDuration}),\n                        isPrimary: false,\n                        isNullable: false\n                    },\n                    {\n                        name: \"query\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheQuery}),\n                        isPrimary: false,\n                        isNullable: false\n                    },\n                    {\n                        name: \"result\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheResult}),\n                        isNullable: false\n                    },\n                ]\n            },\n        ));\n    }\n\n    /**\n     * Caches given query result.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    getFromCache(options: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<QueryResultCacheOptions|undefined> {\n        queryRunner = this.getQueryRunner(queryRunner);\n        const qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select()\n            .from(this.queryResultCacheTable, \"cache\");\n\n        if (options.identifier) {\n            return qb\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"identifier\")} = :identifier`)\n                .setParameters({ identifier: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.identifier, \"nvarchar\") : options.identifier })\n                .getRawOne();\n\n        } else if (options.query) {\n            if (this.connection.driver instanceof OracleDriver) {\n                return qb\n                    .where(`dbms_lob.compare(${qb.escape(\"cache\")}.${qb.escape(\"query\")}, :query) = 0`, { query: options.query })\n                    .getRawOne();\n            }\n\n            return qb\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"query\")} = :query`)\n                .setParameters({ query: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.query, \"nvarchar\") : options.query })\n                .getRawOne();\n        }\n\n        return Promise.resolve(undefined);\n    }\n\n    /**\n     * Checks if cache is expired or not.\n     */\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\n        const duration = typeof savedCache.duration === \"string\" ? parseInt(savedCache.duration) : savedCache.duration;\n        return ((typeof savedCache.time === \"string\" ? parseInt(savedCache.time as any) : savedCache.time)! + duration) < new Date().getTime();\n    }\n\n    /**\n     * Stores given query result in the cache.\n     */\n    async storeInCache(options: QueryResultCacheOptions, savedCache: QueryResultCacheOptions|undefined, queryRunner?: QueryRunner): Promise<void> {\n        queryRunner = this.getQueryRunner(queryRunner);\n\n        let insertedValues: ObjectLiteral = options;\n        if (this.connection.driver instanceof SqlServerDriver) { // todo: bad abstraction, re-implement this part, probably better if we create an entity metadata for cache table\n            insertedValues = {\n                identifier: new MssqlParameter(options.identifier, \"nvarchar\"),\n                time: new MssqlParameter(options.time, \"bigint\"),\n                duration: new MssqlParameter(options.duration, \"int\"),\n                query: new MssqlParameter(options.query, \"nvarchar\"),\n                result: new MssqlParameter(options.result, \"nvarchar\"),\n            };\n        }\n\n        if (savedCache && savedCache.identifier) { // if exist then update\n            const qb = queryRunner.manager\n                .createQueryBuilder()\n                .update(this.queryResultCacheTable)\n                .set(insertedValues);\n\n            qb.where(`${qb.escape(\"identifier\")} = :condition`, { condition: insertedValues.identifier });\n            await qb.execute();\n\n        } else if (savedCache && savedCache.query) { // if exist then update\n            const qb = queryRunner.manager\n                .createQueryBuilder()\n                .update(this.queryResultCacheTable)\n                .set(insertedValues);\n\n            if (this.connection.driver instanceof OracleDriver) {\n                qb.where(`dbms_lob.compare(\"query\", :condition) = 0`, { condition: insertedValues.query });\n\n            } else {\n                qb.where(`${qb.escape(\"query\")} = :condition`, { condition: insertedValues.query });\n            }\n\n            await qb.execute();\n\n        } else { // otherwise insert\n            await queryRunner.manager\n                .createQueryBuilder()\n                .insert()\n                .into(this.queryResultCacheTable)\n                .values(insertedValues)\n                .execute();\n        }\n    }\n\n    /**\n     * Clears everything stored in the cache.\n     */\n    async clear(queryRunner: QueryRunner): Promise<void> {\n        return this.getQueryRunner(queryRunner).clearTable(this.queryResultCacheTable);\n    }\n\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    async remove(identifiers: string[], queryRunner?: QueryRunner): Promise<void> {\n        await Promise.all(identifiers.map(identifier => {\n            const qb = this.getQueryRunner(queryRunner).manager.createQueryBuilder();\n            return qb.delete()\n                .from(this.queryResultCacheTable)\n                .where(`${qb.escape(\"identifier\")} = :identifier`, {identifier})\n                .execute();\n        }));\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets a query runner to work with.\n     */\n    protected getQueryRunner(queryRunner: QueryRunner|undefined): QueryRunner {\n        if (queryRunner)\n            return queryRunner;\n\n        return this.connection.createQueryRunner();\n    }\n\n}\n"],"sourceRoot":".."}