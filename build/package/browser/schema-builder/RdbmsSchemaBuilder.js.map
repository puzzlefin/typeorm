{"version":3,"sources":["../browser/src/schema-builder/RdbmsSchemaBuilder.ts"],"names":[],"mappings":"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","file":"RdbmsSchemaBuilder.js","sourcesContent":["import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {SapDriver} from \"../driver/sap/SapDriver\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {Table} from \"./table/Table\";\nimport {TableColumn} from \"./table/TableColumn\";\nimport {TableForeignKey} from \"./table/TableForeignKey\";\nimport {TableIndex} from \"./table/TableIndex\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {SchemaBuilder} from \"./SchemaBuilder\";\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\nimport {TableUtils} from \"./util/TableUtils\";\nimport {TableColumnOptions} from \"./options/TableColumnOptions\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {TableUnique} from \"./table/TableUnique\";\nimport {TableCheck} from \"./table/TableCheck\";\nimport {TableExclusion} from \"./table/TableExclusion\";\nimport {View} from \"./view/View\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\";\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class RdbmsSchemaBuilder implements SchemaBuilder {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to execute schema creation queries in a single connection.\n     */\n    protected queryRunner: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        this.queryRunner = this.connection.createQueryRunner();\n        // CockroachDB implements asynchronous schema sync operations which can not been executed in transaction.\n        // E.g. if you try to DROP column and ADD it again in the same transaction, crdb throws error.\n        if (!(this.connection.driver instanceof CockroachDriver))\n            await this.queryRunner.startTransaction();\n        try {\n            const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);\n            // TODO: typeorm_metadata table needs only for Views for now.\n            //  Remove condition or add new conditions if necessary (for CHECK constraints for example).\n            if (this.viewEntityToSyncMetadatas.length > 0)\n                await this.createTypeormMetadataTable();\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews([]);\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache)\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            if (!(this.connection.driver instanceof CockroachDriver))\n                await this.queryRunner.commitTransaction();\n\n        } catch (error) {\n\n            try { // we throw original error even if rollback thrown an error\n                if (!(this.connection.driver instanceof CockroachDriver))\n                    await this.queryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.queryRunner.release();\n        }\n    }\n\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    async log(): Promise<SqlInMemory> {\n        this.queryRunner = this.connection.createQueryRunner();\n        try {\n            const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);\n            // TODO: typeorm_metadata table needs only for Views for now.\n            //  Remove condition or add new conditions if necessary (for CHECK constraints for example).\n            if (this.viewEntityToSyncMetadatas.length > 0)\n                await this.createTypeormMetadataTable();\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews([]);\n            this.queryRunner.enableSqlMemory();\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache) // todo: check this functionality\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            return this.queryRunner.getMemorySql();\n\n        } finally {\n            // its important to disable this mode despite the fact we are release query builder\n            // because there exist drivers which reuse same query runner. Also its important to disable\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\n            this.queryRunner.disableSqlMemory();\n            await this.queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => metadata.synchronize && metadata.tableType !== \"entity-child\" && metadata.tableType !== \"view\");\n    }\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get viewEntityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => metadata.tableType === \"view\" && metadata.synchronize);\n    }\n\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    protected async executeSchemaSyncOperationsInProperOrder(): Promise<void> {\n        await this.dropOldViews();\n        await this.dropOldForeignKeys();\n        await this.dropOldIndices();\n        await this.dropOldChecks();\n        await this.dropOldExclusions();\n        await this.dropCompositeUniqueConstraints();\n        // await this.renameTables();\n        await this.renameColumns();\n        await this.createNewTables();\n        await this.dropRemovedColumns();\n        await this.addNewColumns();\n        await this.updatePrimaryKeys();\n        await this.updateExistColumns();\n        await this.createNewIndices();\n        await this.createNewChecks();\n        await this.createNewExclusions();\n        await this.createCompositeUniqueConstraints();\n        await this.createForeignKeys();\n        await this.createViews();\n    }\n\n    /**\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n     */\n    protected async dropOldForeignKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const tableForeignKeysToDrop = table.foreignKeys.filter(tableForeignKey => {\n                const metadataFK = metadata.foreignKeys.find(metadataForeignKey => foreignKeysMatch(tableForeignKey, metadataForeignKey));\n                return !metadataFK\n                    || (metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete)\n                    || (metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate);\n            });\n            if (tableForeignKeysToDrop.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old foreign keys of ${table.name}: ${tableForeignKeysToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\n\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop);\n        }\n    }\n\n    /**\n     * Rename tables\n     */\n    protected async renameTables(): Promise<void> {\n        // for (const metadata of this.entityToSyncMetadatas) {\n        //     const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n        // }\n    }\n\n    /**\n     * Renames columns.\n     * Works if only one column per table was changed.\n     * Changes only column name. If something besides name was changed, these changes will be ignored.\n     */\n    protected async renameColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            if (metadata.columns.length !== table.columns.length)\n                continue;\n\n            const renamedMetadataColumns = metadata.columns.filter(column => {\n                return !table.columns.find(tableColumn => {\n                    return tableColumn.name === column.databaseName\n                        && tableColumn.type === this.connection.driver.normalizeType(column)\n                        && tableColumn.isNullable === column.isNullable\n                        && tableColumn.isUnique === this.connection.driver.normalizeIsUnique(column);\n                });\n            });\n\n            if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1)\n                continue;\n\n            const renamedTableColumns = table.columns.filter(tableColumn => {\n                return !metadata.columns.find(column => {\n                    return column.databaseName === tableColumn.name\n                        && this.connection.driver.normalizeType(column) === tableColumn.type\n                        && column.isNullable === tableColumn.isNullable\n                        && this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;\n                });\n            });\n\n            if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1)\n                continue;\n\n            const renamedColumn = renamedTableColumns[0].clone();\n            renamedColumn.name = renamedMetadataColumns[0].databaseName;\n\n            this.connection.logger.logSchemaBuild(`renaming column \"${renamedTableColumns[0].name}\" in to \"${renamedColumn.name}\"`);\n            await this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn);\n        }\n    }\n\n    protected async dropOldIndices(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const dropQueries = table.indices\n                .filter(tableIndex => {\n                    const indexMetadata = metadata.indices.find(index => index.name === tableIndex.name);\n                    if (indexMetadata) {\n                        if (indexMetadata.synchronize === false)\n                            return false;\n\n                        if (indexMetadata.isUnique !== tableIndex.isUnique)\n                            return true;\n\n                        if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                            return true;\n\n                        if (this.connection.driver.isFullTextColumnTypeSupported() && indexMetadata.isFulltext !== tableIndex.isFulltext)\n                            return true;\n\n                        if (indexMetadata.columns.length !== tableIndex.columnNames.length)\n                            return true;\n\n                        return !indexMetadata.columns.every(column => tableIndex.columnNames.indexOf(column.databaseName) !== -1);\n                    }\n\n                    return true;\n                })\n                .map(async tableIndex => {\n                    this.connection.logger.logSchemaBuild(`dropping an index: \"${tableIndex.name}\" from table ${table.name}`);\n                    await this.queryRunner.dropIndex(table, tableIndex);\n                });\n\n            await Promise.all(dropQueries);\n        }\n    }\n\n    protected async dropOldChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const oldChecks = table.checks.filter(tableCheck => {\n                return !metadata.checks.find(checkMetadata => checkMetadata.name === tableCheck.name);\n            });\n\n            if (oldChecks.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old check constraint: ${oldChecks.map(check => `\"${check.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropCheckConstraints(table, oldChecks);\n        }\n    }\n\n    protected async dropCompositeUniqueConstraints(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const compositeUniques = table.uniques.filter(tableUnique => {\n                return tableUnique.columnNames.length > 1 && !metadata.uniques.find(uniqueMetadata => uniqueMetadata.name === tableUnique.name);\n            });\n\n            if (compositeUniques.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old unique constraint: ${compositeUniques.map(unique => `\"${unique.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropUniqueConstraints(table, compositeUniques);\n        }\n    }\n\n    protected async dropOldExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver instanceof PostgresDriver))\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const oldExclusions = table.exclusions.filter(tableExclusion => {\n                return !metadata.exclusions.find(exclusionMetadata => exclusionMetadata.name === tableExclusion.name);\n            });\n\n            if (oldExclusions.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old exclusion constraint: ${oldExclusions.map(exclusion => `\"${exclusion.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropExclusionConstraints(table, oldExclusions);\n        }\n    }\n\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    protected async createNewTables(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            // check if table does not exist yet\n            const existTable = this.queryRunner.loadedTables.find(table => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver|SapDriver>this.connection.driver).options.schema;\n                const fullTableName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n\n                return table.name === fullTableName;\n            });\n            if (existTable)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`creating a new table: ${metadata.tablePath}`);\n\n            // create a new table and sync it in the database\n            const table = Table.create(metadata, this.connection.driver);\n            await this.queryRunner.createTable(table, false, false);\n            this.queryRunner.loadedTables.push(table);\n        }\n    }\n\n    protected async createViews(): Promise<void> {\n        for (const metadata of this.viewEntityToSyncMetadatas) {\n            // check if view does not exist yet\n            const existView = this.queryRunner.loadedViews.find(view => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver>this.connection.driver).options.schema;\n                const fullViewName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                const viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression!(this.connection).getQuery();\n                return view.name === fullViewName && viewExpression === metadataExpression;\n            });\n            if (existView)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`creating a new view: ${metadata.tablePath}`);\n\n            // create a new view and sync it in the database\n            const view = View.create(metadata, this.connection.driver);\n            await this.queryRunner.createView(view);\n            this.queryRunner.loadedViews.push(view);\n        }\n    }\n\n    protected async dropOldViews(): Promise<void> {\n        for (const view of this.queryRunner.loadedViews) {\n            const existViewMetadata = this.viewEntityToSyncMetadatas.find(metadata => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver>this.connection.driver).options.schema;\n                const fullViewName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                const viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression!(this.connection).getQuery();\n                return view.name === fullViewName && viewExpression === metadataExpression;\n            });\n\n            if (existViewMetadata)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping an old view: ${view.name}`);\n\n            // drop an old view\n            await this.queryRunner.dropView(view);\n            this.queryRunner.loadedViews.splice(this.queryRunner.loadedViews.indexOf(view), 1);\n        }\n    }\n\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    protected async dropRemovedColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedTableColumns = table.columns.filter(tableColumn => {\n                return !metadata.columns.find(columnMetadata => columnMetadata.databaseName === tableColumn.name);\n            });\n            if (droppedTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`columns dropped in ${table.name}: ` + droppedTableColumns.map(column => column.name).join(\", \"));\n\n            // drop columns from the database\n            await this.queryRunner.dropColumns(table, droppedTableColumns);\n        }\n    }\n\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    protected async addNewColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\n                return !table.columns.find(tableColumn => tableColumn.name === columnMetadata.databaseName);\n            });\n            if (newColumnMetadatas.length === 0)\n                continue;\n\n            // create columns in the database\n            const newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);\n            const newTableColumns = newTableColumnOptions.map(option => new TableColumn(option));\n\n            if (newTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.databaseName).join(\", \"));\n            await this.queryRunner.addColumns(table, newTableColumns);\n        }\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    protected async updatePrimaryKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const primaryMetadataColumns = metadata.columns.filter(column => column.isPrimary);\n            const primaryTableColumns = table.columns.filter(column => column.isPrimary);\n            if (primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1) {\n                const changedPrimaryColumns = primaryMetadataColumns.map(primaryMetadataColumn => {\n                    return new TableColumn(TableUtils.createTableColumnOptions(primaryMetadataColumn, this.connection.driver));\n                });\n                await this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns);\n            }\n        }\n    }\n\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    protected async updateExistColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);\n            if (changedColumns.length === 0)\n                continue;\n\n            // drop all foreign keys that point to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnReferencedForeignKeys(metadata.tablePath, changedColumn.databaseName);\n            }\n\n            // drop all composite indices related to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnCompositeIndices(metadata.tablePath, changedColumn.databaseName);\n            }\n\n            // drop all composite uniques related to this column\n            // Mysql does not support unique constraints.\n            if (!(this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)) {\n                for (const changedColumn of changedColumns) {\n                    await this.dropColumnCompositeUniques(metadata.tablePath, changedColumn.databaseName);\n                }\n            }\n\n            // generate a map of new/old columns\n            const newAndOldTableColumns = changedColumns.map(changedColumn => {\n                const oldTableColumn = table.columns.find(column => column.name === changedColumn.databaseName)!;\n                const newTableColumnOptions = TableUtils.createTableColumnOptions(changedColumn, this.connection.driver);\n                const newTableColumn = new TableColumn(newTableColumnOptions);\n\n                return {\n                    oldColumn: oldTableColumn,\n                    newColumn: newTableColumn\n                };\n            });\n\n            if (newAndOldTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`columns changed in \"${table.name}\". updating: ` + changedColumns.map(column => column.databaseName).join(\", \"));\n            await this.queryRunner.changeColumns(table, newAndOldTableColumns);\n        }\n    }\n\n    /**\n     * Creates composite indices which are missing in db yet.\n     */\n    protected async createNewIndices(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newIndices = metadata.indices\n                .filter(indexMetadata => !table.indices.find(tableIndex => tableIndex.name === indexMetadata.name) && indexMetadata.synchronize === true)\n                .map(indexMetadata => TableIndex.create(indexMetadata));\n\n            if (newIndices.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new indices ${newIndices.map(index => `\"${index.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createIndices(table, newIndices);\n        }\n    }\n\n    protected async createNewChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newChecks = metadata.checks\n                .filter(checkMetadata => !table.checks.find(tableCheck => tableCheck.name === checkMetadata.name))\n                .map(checkMetadata => TableCheck.create(checkMetadata));\n\n            if (newChecks.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new check constraints: ${newChecks.map(index => `\"${index.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createCheckConstraints(table, newChecks);\n        }\n    }\n\n    /**\n     * Creates composite uniques which are missing in db yet.\n     */\n    protected async createCompositeUniqueConstraints(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const compositeUniques = metadata.uniques\n                .filter(uniqueMetadata => uniqueMetadata.columns.length > 1 && !table.uniques.find(tableUnique => tableUnique.name === uniqueMetadata.name))\n                .map(uniqueMetadata => TableUnique.create(uniqueMetadata));\n\n            if (compositeUniques.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new unique constraints: ${compositeUniques.map(unique => `\"${unique.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createUniqueConstraints(table, compositeUniques);\n        }\n    }\n\n    /**\n     * Creates exclusions which are missing in db yet.\n     */\n    protected async createNewExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver instanceof PostgresDriver))\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newExclusions = metadata.exclusions\n            .filter(exclusionMetadata => !table.exclusions.find(tableExclusion => tableExclusion.name === exclusionMetadata.name))\n            .map(exclusionMetadata => TableExclusion.create(exclusionMetadata));\n\n            if (newExclusions.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new exclusion constraints: ${newExclusions.map(exclusion => `\"${exclusion.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createExclusionConstraints(table, newExclusions);\n        }\n    }\n\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    protected async createForeignKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newKeys = metadata.foreignKeys\n                .filter(foreignKey => {\n                return !table.foreignKeys.find(dbForeignKey => foreignKeysMatch(dbForeignKey, foreignKey));\n            });\n            if (newKeys.length === 0)\n                continue;\n\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => TableForeignKey.create(foreignKeyMetadata));\n            this.connection.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")} on table \"${table.name}\"`);\n            await this.queryRunner.createForeignKeys(table, dbForeignKeys);\n        }\n    }\n\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedForeignKeys(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const tablesWithFK: Table[] = [];\n        const columnForeignKey = table.foreignKeys.find(foreignKey => foreignKey.columnNames.indexOf(columnName) !== -1);\n        if (columnForeignKey) {\n            const clonedTable = table.clone();\n            clonedTable.foreignKeys = [columnForeignKey];\n            tablesWithFK.push(clonedTable);\n            table.removeForeignKey(columnForeignKey);\n        }\n\n        this.queryRunner.loadedTables.forEach(loadedTable => {\n            const dependForeignKeys = loadedTable.foreignKeys.filter(foreignKey => {\n                return foreignKey.referencedTableName === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;\n            });\n\n            if (dependForeignKeys.length > 0) {\n                const clonedTable = loadedTable.clone();\n                clonedTable.foreignKeys = dependForeignKeys;\n                tablesWithFK.push(clonedTable);\n                dependForeignKeys.forEach(dependForeignKey => loadedTable.removeForeignKey(dependForeignKey));\n            }\n        });\n\n        if (tablesWithFK.length > 0) {\n            for (const tableWithFK of tablesWithFK) {\n                this.connection.logger.logSchemaBuild(`dropping related foreign keys of ${tableWithFK.name}: ${tableWithFK.foreignKeys.map(foreignKey => foreignKey.name).join(\", \")}`);\n                await this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);\n            }\n        }\n    }\n\n    /**\n     * Drops all composite indices, related to given column.\n     */\n    protected async dropColumnCompositeIndices(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const relatedIndices = table.indices.filter(index => index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1);\n        if (relatedIndices.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related indices of \"${tablePath}\".\"${columnName}\": ${relatedIndices.map(index => index.name).join(\", \")}`);\n        await this.queryRunner.dropIndices(table, relatedIndices);\n    }\n\n    /**\n     * Drops all composite uniques, related to given column.\n     */\n    protected async dropColumnCompositeUniques(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const relatedUniques = table.uniques.filter(unique => unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1);\n        if (relatedUniques.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related unique constraints of \"${tablePath}\".\"${columnName}\": ${relatedUniques.map(unique => unique.name).join(\", \")}`);\n        await this.queryRunner.dropUniqueConstraints(table, relatedUniques);\n    }\n\n    /**\n     * Creates new columns from the given column metadatas.\n     */\n    protected metadataColumnsToTableColumnOptions(columns: ColumnMetadata[]): TableColumnOptions[] {\n        return columns.map(columnMetadata => TableUtils.createTableColumnOptions(columnMetadata, this.connection.driver));\n    }\n\n    /**\n     * Creates typeorm service table for storing user defined Views.\n     */\n    protected async createTypeormMetadataTable() {\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        const typeormMetadataTable = this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n\n        await this.queryRunner.createTable(new Table(\n            {\n                name: typeormMetadataTable,\n                columns: [\n                    {\n                        name: \"type\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataType}),\n                        isNullable: false\n                    },\n                    {\n                        name: \"database\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataDatabase}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"schema\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataSchema}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"table\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataTable}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"name\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataName}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"value\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataValue}),\n                        isNullable: true\n                    },\n                ]\n            },\n        ), true);\n    }\n\n}\n\nfunction foreignKeysMatch(\n    tableForeignKey: TableForeignKey, metadataForeignKey: ForeignKeyMetadata\n): boolean {\n    return (tableForeignKey.name === metadataForeignKey.name)\n        && (tableForeignKey.referencedTableName === metadataForeignKey.referencedTablePath);\n}\n"],"sourceRoot":".."}