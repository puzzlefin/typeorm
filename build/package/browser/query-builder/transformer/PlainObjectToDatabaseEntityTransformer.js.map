{"version":3,"sources":["../browser/src/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.ts"],"names":[],"mappings":"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","file":"PlainObjectToDatabaseEntityTransformer.js","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nclass LoadMapItem {\n\n    entity?: ObjectLiteral;\n    plainEntity: ObjectLiteral;\n    metadata: EntityMetadata;\n    parentLoadMapItem?: LoadMapItem;\n    relation?: RelationMetadata;\n\n    constructor(plainEntity: ObjectLiteral,\n                metadata: EntityMetadata,\n                parentLoadMapItem?: LoadMapItem,\n                relation?: RelationMetadata) {\n        this.plainEntity = plainEntity;\n        this.metadata = metadata;\n        this.parentLoadMapItem = parentLoadMapItem;\n        this.relation = relation;\n    }\n\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    get id(): any {\n        return this.metadata.getEntityIdMixedMap(this.plainEntity);\n    }\n\n}\n\nclass LoadMap {\n\n    loadMapItems: LoadMapItem[] = [];\n\n    get mainLoadMapItem(): LoadMapItem|undefined {\n        return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);\n    }\n\n    addLoadMap(newLoadMap: LoadMapItem) {\n        const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);\n        if (!item)\n            this.loadMapItems.push(newLoadMap);\n    }\n\n    fillEntities(target: Function|string, entities: any[]) {\n        entities.forEach(entity => {\n            const item = this.loadMapItems.find(loadMapItem => {\n                return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);\n            });\n            if (item)\n                item.entity = entity;\n        });\n    }\n\n    groupByTargetIds(): { target: Function|string, ids: any[] }[] {\n        const groups: { target: Function|string, ids: any[] }[] = [];\n        this.loadMapItems.forEach(loadMapItem => {\n            let group = groups.find(group => group.target === loadMapItem.target);\n            if (!group) {\n                group = { target: loadMapItem.target, ids: [] };\n                groups.push(group);\n            }\n\n            group.ids.push(loadMapItem.id);\n        });\n        return groups;\n    }\n\n}\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n\n    constructor(private manager: EntityManager) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async transform(plainObject: ObjectLiteral, metadata: EntityMetadata): Promise<ObjectLiteral|undefined> {\n\n        // if plain object does not have id then nothing to load really\n        if (!metadata.hasAllPrimaryKeys(plainObject))\n            return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\n\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\n        const loadMap = new LoadMap();\n        const fillLoadMap = (entity: ObjectLiteral, entityMetadata: EntityMetadata, parentLoadMapItem?: LoadMapItem, relation?: RelationMetadata) => {\n            const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n            loadMap.addLoadMap(item);\n\n            entityMetadata\n                .extractRelationValuesFromEntity(entity, metadata.relations)\n                .filter(value => value !== null && value !== undefined)\n                .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\n        };\n        fillLoadMap(plainObject, metadata);\n        // load all entities and store them in the load map\n        await Promise.all(loadMap.groupByTargetIds().map(targetWithIds => { // todo: fix type hinting\n            return this.manager\n                .findByIds<ObjectLiteral>(targetWithIds.target as any, targetWithIds.ids)\n                .then(entities => loadMap.fillEntities(targetWithIds.target, entities));\n        }));\n\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\n        loadMap.loadMapItems.forEach(loadMapItem => {\n            if (!loadMapItem.relation ||\n                !loadMapItem.entity ||\n                !loadMapItem.parentLoadMapItem ||\n                !loadMapItem.parentLoadMapItem.entity)\n                return;\n\n            if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\n                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n\n            } else {\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n            }\n        });\n\n        return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;\n    }\n\n}"],"sourceRoot":"../.."}