{"version":3,"sources":["../browser/src/persistence/EntityPersistExecutor.ts"],"names":[],"mappings":"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","file":"EntityPersistExecutor.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {MustBeEntityError} from \"../error/MustBeEntityError\";\nimport {SubjectExecutor} from \"./SubjectExecutor\";\nimport {CannotDetermineEntityError} from \"../error/CannotDetermineEntityError\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Connection} from \"../connection/Connection\";\nimport {Subject} from \"./Subject\";\nimport {OneToManySubjectBuilder} from \"./subject-builder/OneToManySubjectBuilder\";\nimport {OneToOneInverseSideSubjectBuilder} from \"./subject-builder/OneToOneInverseSideSubjectBuilder\";\nimport {ManyToManySubjectBuilder} from \"./subject-builder/ManyToManySubjectBuilder\";\nimport {SubjectDatabaseEntityLoader} from \"./SubjectDatabaseEntityLoader\";\nimport {CascadesSubjectBuilder} from \"./subject-builder/CascadesSubjectBuilder\";\nimport {OrmUtils} from \"../util/OrmUtils\";\n\n/**\n * Persists a single entity or multiple entities - saves or removes them.\n */\nexport class EntityPersistExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner: QueryRunner|undefined,\n                protected mode: \"save\"|\"remove\"|\"soft-remove\"|\"recover\",\n                protected target: Function|string|undefined,\n                protected entity: ObjectLiteral|ObjectLiteral[],\n                protected options?: SaveOptions & RemoveOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes persistence operation ob given entity or entities.\n     */\n    async execute(): Promise<void> {\n\n        // check if entity we are going to save is valid and is an object\n        if (!this.entity || typeof this.entity !== \"object\")\n            return Promise.reject(new MustBeEntityError(this.mode, this.entity));\n\n        // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded relations are resolved\n        await Promise.resolve();\n\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n\n        // save data in the query runner - this is useful functionality to share data from outside of the world\n        // with third classes - like subscribers and listener methods\n        if (this.options && this.options.data)\n            queryRunner.data = this.options.data;\n\n        try {\n\n            // collect all operate subjects\n            const entities: ObjectLiteral[] = Array.isArray(this.entity) ? this.entity : [this.entity];\n            const entitiesInChunks = this.options && this.options.chunk && this.options.chunk > 0 ? OrmUtils.chunk(entities, this.options.chunk) : [entities];\n\n            // console.time(\"building subject executors...\");\n            const executors = await Promise.all(entitiesInChunks.map(async entities => {\n                const subjects: Subject[] = [];\n\n                // create subjects for all entities we received for the persistence\n                entities.forEach(entity => {\n                    const entityTarget = this.target ? this.target : entity.constructor;\n                    if (entityTarget === Object)\n                        throw new CannotDetermineEntityError(this.mode);\n\n                    subjects.push(new Subject({\n                        metadata: this.connection.getMetadata(entityTarget),\n                        entity: entity,\n                        canBeInserted: this.mode === \"save\",\n                        canBeUpdated: this.mode === \"save\",\n                        mustBeRemoved: this.mode === \"remove\",\n                        canBeSoftRemoved: this.mode === \"soft-remove\",\n                        canBeRecovered: this.mode === \"recover\"\n                    }));\n                });\n\n                // console.time(\"building cascades...\");\n                // go through each entity with metadata and create subjects and subjects by cascades for them\n                const cascadesSubjectBuilder = new CascadesSubjectBuilder(subjects);\n                subjects.forEach(subject => {\n                    // next step we build list of subjects we will operate with\n                    // these subjects are subjects that we need to insert or update alongside with main persisted entity\n                    cascadesSubjectBuilder.build(subject, this.mode);\n                });\n                // console.timeEnd(\"building cascades...\");\n\n                // load database entities for all subjects we have\n                // next step is to load database entities for all operate subjects\n                // console.time(\"loading...\");\n                await new SubjectDatabaseEntityLoader(queryRunner, subjects).load(this.mode);\n                // console.timeEnd(\"loading...\");\n\n                // console.time(\"other subjects...\");\n                // build all related subjects and change maps\n                if (this.mode === \"save\" || this.mode === \"soft-remove\" || this.mode === \"recover\") {\n                    new OneToManySubjectBuilder(subjects).build();\n                    new OneToOneInverseSideSubjectBuilder(subjects).build();\n                    new ManyToManySubjectBuilder(subjects).build();\n                } else {\n                    subjects.forEach(subject => {\n                        if (subject.mustBeRemoved) {\n                            new ManyToManySubjectBuilder(subjects).buildForAllRemoval(subject);\n                        }\n                    });\n                }\n                // console.timeEnd(\"other subjects...\");\n                // console.timeEnd(\"building subjects...\");\n                // console.log(\"subjects\", subjects);\n\n                // create a subject executor\n                return new SubjectExecutor(queryRunner, subjects, this.options);\n            }));\n            // console.timeEnd(\"building subject executors...\");\n\n            // make sure we have at least one executable operation before we create a transaction and proceed\n            // if we don't have operations it means we don't really need to update or remove something\n            const executorsWithExecutableOperations = executors.filter(executor => executor.hasExecutableOperations);\n            if (executorsWithExecutableOperations.length === 0)\n                return;\n\n            // start execute queries in a transaction\n            // if transaction is already opened in this query runner then we don't touch it\n            // if its not opened yet then we open it here, and once we finish - we close it\n            let isTransactionStartedByUs = false;\n            try {\n\n                // open transaction if its not opened yet\n                if (!queryRunner.isTransactionActive) {\n                    if (!this.options || this.options.transaction !== false) { // start transaction until it was not explicitly disabled\n                        isTransactionStartedByUs = true;\n                        await queryRunner.startTransaction();\n                    }\n                }\n\n                // execute all persistence operations for all entities we have\n                // console.time(\"executing subject executors...\");\n                for (const executor of executorsWithExecutableOperations) {\n                    await executor.execute();\n                }\n                // console.timeEnd(\"executing subject executors...\");\n\n                // commit transaction if it was started by us\n                // console.time(\"commit\");\n                if (isTransactionStartedByUs === true)\n                    await queryRunner.commitTransaction();\n                // console.timeEnd(\"commit\");\n\n            } catch (error) {\n\n                // rollback transaction if it was started by us\n                if (isTransactionStartedByUs) {\n                    try {\n                        await queryRunner.rollbackTransaction();\n                    } catch (rollbackError) { }\n                }\n                throw error;\n            }\n\n        } finally {\n\n            // release query runner only if its created by us\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n}\n"],"sourceRoot":".."}