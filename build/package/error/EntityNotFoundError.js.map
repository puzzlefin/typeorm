{"version":3,"sources":["../../src/error/EntityNotFoundError.ts"],"names":[],"mappings":";;;AACA,oCAAsC;AAEtC;;GAEG;AACH,MAAa,mBAAoB,SAAQ,KAAK;IAG1C,YAAY,WAA8B,EAAE,QAAa;QACrD,KAAK,EAAE,CAAC;QAHZ,SAAI,GAAG,gBAAgB,CAAC;QAIpB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,mBAAmB,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,UAAkB,CAAC;QACvB,IAAI,WAAW,YAAY,oBAAY,EAAE;YACrC,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC;SACzC;aAAM,IAAI,OAAO,WAAW,KAAK,UAAU,EAAE;YAC1C,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC;SACjC;aAAM,IAAI,OAAO,WAAW,KAAK,QAAQ,IAAI,MAAM,IAAI,WAAW,EAAE;YACjE,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC;SACjC;aAAM;YACH,UAAU,GAAG,WAAW,CAAC;SAC5B;QACD,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,sCAAsC,UAAU,eAAe,cAAc,EAAE,CAAC;IACnG,CAAC;IAEO,iBAAiB,CAAC,QAAa;QACnC,IAAI;YACA,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;SAC5C;QAAC,OAAO,CAAC,EAAE,GAAG;QACf,OAAO,EAAE,GAAG,QAAQ,CAAC;IACzB,CAAC;CAEJ;AA3BD,kDA2BC","file":"EntityNotFoundError.js","sourcesContent":["import {EntityTarget} from \"../common/EntityTarget\";\nimport {EntitySchema} from \"../index\";\n\n/**\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\n */\nexport class EntityNotFoundError extends Error {\n    name = \"EntityNotFound\";\n\n    constructor(entityClass: EntityTarget<any>, criteria: any) {\n        super();\n        Object.setPrototypeOf(this, EntityNotFoundError.prototype);\n        let targetName: string;\n        if (entityClass instanceof EntitySchema) {\n            targetName = entityClass.options.name;\n        } else if (typeof entityClass === \"function\") {\n            targetName = entityClass.name;\n        } else if (typeof entityClass === \"object\" && \"name\" in entityClass) {\n            targetName = entityClass.name;\n        } else {\n            targetName = entityClass;\n        }\n        const criteriaString = this.stringifyCriteria(criteria);\n        this.message = `Could not find any entity of type \"${targetName}\" matching: ${criteriaString}`;\n    }\n\n    private stringifyCriteria(criteria: any): string {\n        try {\n            return JSON.stringify(criteria, null, 4);\n        } catch (e) { }\n        return \"\" + criteria;\n    }\n\n}\n"],"sourceRoot":".."}