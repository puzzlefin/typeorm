{"version":3,"sources":["../../src/error/MetadataAlreadyExistsError.ts"],"names":[],"mappings":";;;AAAA;GACG;AACH,MAAa,0BAA2B,SAAQ,KAAK;IAGjD,YAAY,YAAoB,EAAE,WAAqB,EAAE,YAAqB;QAC1E,KAAK,EAAE,CAAC;QAHZ,SAAI,GAAG,4BAA4B,CAAC;QAIhC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,0BAA0B,CAAC,SAAS,CAAC,CAAC;QAClE,IAAI,CAAC,OAAO,GAAG,YAAY,GAAG,qDAAqD,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;YAC7G,CAAC,YAAY,CAAC,CAAC,CAAC,eAAe,GAAG,YAAY,CAAC,CAAC,CAAC,8DAA8D;gBAC/G,iGAAiG,CAAC,CAAC;IAC3G,CAAC;CAEJ;AAXD,gEAWC","file":"MetadataAlreadyExistsError.js","sourcesContent":["/**\n */\nexport class MetadataAlreadyExistsError extends Error {\n    name = \"MetadataAlreadyExistsError\";\n\n    constructor(metadataType: string, constructor: Function, propertyName?: string) {\n        super();\n        Object.setPrototypeOf(this, MetadataAlreadyExistsError.prototype);\n        this.message = metadataType + \" metadata already exists for the class constructor \" + JSON.stringify(constructor) +\n            (propertyName ? \" on property \" + propertyName : \". If you previously renamed or moved entity class, make sure\" +\n            \" that compiled version of old entity class source wasn't left in the compiler output directory.\");\n    }\n\n}"],"sourceRoot":".."}