{"version":3,"sources":["../../src/commands/SchemaSyncCommand.ts"],"names":[],"mappings":";;;;AAAA,oCAA0C;AAE1C,mFAA8E;AAE9E,0DAA0B;AAE1B;;GAEG;AACH,MAAa,iBAAiB;IAA9B;QACI,YAAO,GAAG,aAAa,CAAC;QACxB,aAAQ,GAAG,8GAA8G;YACrH,+DAA+D,CAAC;IA6CxE,CAAC;IA3CG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI;aACN,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,yEAAyE;SACtF,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,OAAO,CAAC,IAAqB;;YAE/B,IAAI,UAAU,GAAyB,SAAS,CAAC;YACjD,IAAI;gBACA,MAAM,uBAAuB,GAAG,IAAI,iDAAuB,CAAC;oBACxD,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;oBACnB,UAAU,EAAE,IAAI,CAAC,MAAa;iBACjC,CAAC,CAAC;gBACH,MAAM,iBAAiB,GAAG,MAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAiB,CAAC,CAAC;gBACpF,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;oBAC7B,WAAW,EAAE,KAAK;oBAClB,aAAa,EAAE,KAAK;oBACpB,UAAU,EAAE,KAAK;oBACjB,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;iBAC/B,CAAC,CAAC;gBACH,UAAU,GAAG,MAAM,IAAA,wBAAgB,EAAC,iBAAiB,CAAC,CAAC;gBACvD,MAAM,UAAU,CAAC,WAAW,EAAE,CAAC;gBAC/B,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;gBAEzB,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC,CAAC;aAE5E;YAAC,OAAO,GAAG,EAAE;gBACV,IAAI,UAAU;oBAAE,MAAO,UAAyB,CAAC,KAAK,EAAE,CAAC;gBAEzD,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC,CAAC;gBACvE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACnB;QACL,CAAC;KAAA;CACJ;AAhDD,8CAgDC","file":"SchemaSyncCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {Connection} from \"../connection/Connection\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport * as yargs from \"yargs\";\nimport chalk from \"chalk\";\n\n/**\n * Synchronizes database schema with entities.\n */\nexport class SchemaSyncCommand implements yargs.CommandModule {\n    command = \"schema:sync\";\n    describe = \"Synchronizes your entities with database schema. It runs schema update queries on all connections you have. \" +\n        \"To run update queries on a concrete connection use -c option.\";\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which schema synchronization needs to to run.\"\n            })\n            .option(\"f\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(args: yargs.Arguments) {\n\n        let connection: Connection|undefined = undefined;\n        try {\n            const connectionOptionsReader = new ConnectionOptionsReader({\n                root: process.cwd(),\n                configName: args.config as any\n            });\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n            Object.assign(connectionOptions, {\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: [\"query\", \"schema\"]\n            });\n            connection = await createConnection(connectionOptions);\n            await connection.synchronize();\n            await connection.close();\n\n            console.log(chalk.green(\"Schema syncronization finished successfully.\"));\n\n        } catch (err) {\n            if (connection) await (connection as Connection).close();\n\n            console.log(chalk.black.bgRed(\"Error during schema synchronization:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n}\n"],"sourceRoot":".."}