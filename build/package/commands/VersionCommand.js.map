{"version":3,"sources":["../../src/commands/VersionCommand.ts"],"names":[],"mappings":";;;;AACA,iDAAmC;AAEnC;;GAEG;AACH,MAAa,cAAc;IAA3B;QACI,YAAO,GAAG,SAAS,CAAC;QACpB,aAAQ,GAAG,2CAA2C,CAAC;IAwC3D,CAAC;IAtCS,OAAO;;YAET,MAAM,YAAY,GAAG,MAAM,cAAc,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC;YAC/E,MAAM,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAC3D,MAAM,eAAe,GAAG,CAAC,YAAY,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAEnH,MAAM,aAAa,GAAG,MAAM,cAAc,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;YACnF,MAAM,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAC7D,MAAM,gBAAgB,GAAG,CAAC,aAAa,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAEvH,IAAI,eAAe,EAAE;gBACjB,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,eAAe,CAAC,CAAC;aAC5D;iBAAM;gBACH,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;aACxD;YACD,IAAI,gBAAgB,EAAE;gBAClB,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,gBAAgB,CAAC,CAAC;aACtE;iBAAM;gBACH,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;aACjD;YAED,IAAI,eAAe,IAAI,gBAAgB,IAAI,eAAe,KAAK,gBAAgB,EAAE;gBAC7E,OAAO,CAAC,GAAG,CAAC,0FAA0F;oBAClG,mEAAmE,CAAC,CAAC;aAC5E;QACL,CAAC;KAAA;IAES,MAAM,CAAC,cAAc,CAAC,OAAe;QAC3C,OAAO,IAAI,OAAO,CAAS,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YACpC,IAAA,oBAAI,EAAC,OAAO,EAAE,CAAC,KAAU,EAAE,MAAW,EAAE,MAAW,EAAE,EAAE;gBACnD,IAAI,MAAM;oBAAE,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,MAAM;oBAAE,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,KAAK;oBAAE,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9B,EAAE,CAAC,EAAE,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CAEJ;AA1CD,wCA0CC","file":"VersionCommand.js","sourcesContent":["import * as yargs from \"yargs\";\nimport {exec} from \"child_process\";\n\n/**\n * Shows typeorm version.\n */\nexport class VersionCommand implements yargs.CommandModule {\n    command = \"version\";\n    describe = \"Prints TypeORM version this project uses.\";\n\n    async handler() {\n\n        const localNpmList = await VersionCommand.executeCommand(\"npm list --depth=0\");\n        const localMatches = localNpmList.match(/ typeorm@(.*)\\n/);\n        const localNpmVersion = (localMatches && localMatches[1] ? localMatches[1] : \"\").replace(/\"invalid\"/gi, \"\").trim();\n\n        const globalNpmList = await VersionCommand.executeCommand(\"npm list -g --depth=0\");\n        const globalMatches = globalNpmList.match(/ typeorm@(.*)\\n/);\n        const globalNpmVersion = (globalMatches && globalMatches[1] ? globalMatches[1] : \"\").replace(/\"invalid\"/gi, \"\").trim();\n\n        if (localNpmVersion) {\n            console.log(\"Local installed version:\", localNpmVersion);\n        } else {\n            console.log(\"No local installed TypeORM was found.\");\n        }\n        if (globalNpmVersion) {\n            console.log(\"Global installed TypeORM version:\", globalNpmVersion);\n        } else {\n            console.log(\"No global installed was found.\");\n        }\n\n        if (localNpmVersion && globalNpmVersion && localNpmVersion !== globalNpmVersion) {\n            console.log(\"To avoid issues with CLI please make sure your global and local TypeORM versions match, \" +\n                \"or you are using locally installed TypeORM instead of global one.\");\n        }\n    }\n\n    protected static executeCommand(command: string) {\n        return new Promise<string>((ok, fail) => {\n            exec(command, (error: any, stdout: any, stderr: any) => {\n                if (stdout) return ok(stdout);\n                if (stderr) return ok(stderr);\n                if (error) return fail(error);\n                ok(\"\");\n            });\n        });\n    }\n\n}\n"],"sourceRoot":".."}