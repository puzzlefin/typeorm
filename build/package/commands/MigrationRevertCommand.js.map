{"version":3,"sources":["../../src/commands/MigrationRevertCommand.ts"],"names":[],"mappings":";;;;AAAA,oCAA0C;AAC1C,mFAA8E;AAG9E,0DAA0B;AAE1B;;GAEG;AACH,MAAa,sBAAsB;IAAnC;QAEI,YAAO,GAAG,kBAAkB,CAAC;QAC7B,aAAQ,GAAG,kCAAkC,CAAC;QAC9C,YAAO,GAAG,mBAAmB,CAAC;IAyElC,CAAC;IAvEG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI;aACN,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,8CAA8C;SAC3D,CAAC;aACD,MAAM,CAAC,aAAa,EAAE;YACnB,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,0FAA0F;SACvG,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,OAAO,CAAC,IAAqB;;YAC/B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,mBAAmB,EAAE;gBACnC,OAAO,CAAC,GAAG,CAAC,0EAA0E,CAAC,CAAC;aAC3F;YAED,IAAI,UAAU,GAAyB,SAAS,CAAC;YACjD,IAAI;gBACA,MAAM,uBAAuB,GAAG,IAAI,iDAAuB,CAAC;oBACxD,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;oBACnB,UAAU,EAAE,IAAI,CAAC,MAAa;iBACjC,CAAC,CAAC;gBACH,MAAM,iBAAiB,GAAG,MAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAiB,CAAC,CAAC;gBACpF,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;oBAC7B,WAAW,EAAE,EAAE;oBACf,WAAW,EAAE,KAAK;oBAClB,aAAa,EAAE,KAAK;oBACpB,UAAU,EAAE,KAAK;oBACjB,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;iBACxC,CAAC,CAAC;gBACH,UAAU,GAAG,MAAM,IAAA,wBAAgB,EAAC,iBAAiB,CAAC,CAAC;gBAEvD,MAAM,OAAO,GAAG;oBACZ,WAAW,EAAE,KAAgC;iBAChD,CAAC;gBAEF,QAAQ,IAAI,CAAC,CAAC,EAAE;oBACZ,KAAK,KAAK;wBACN,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC;wBAC5B,MAAM;oBACV,KAAK,MAAM,CAAC;oBACZ,KAAK,OAAO;wBACR,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC;wBAC7B,MAAM;oBACV,KAAK,MAAM;wBACP,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC;wBAC7B,MAAM;oBACV,QAAQ;oBACJ,OAAO;iBACd;gBAED,MAAM,UAAU,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;gBAC5C,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;aAE5B;YAAC,OAAO,GAAG,EAAE;gBACV,IAAI,UAAU;oBAAE,MAAO,UAAyB,CAAC,KAAK,EAAE,CAAC;gBAEzD,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;gBACjE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACnB;QACL,CAAC;KAAA;CAEJ;AA7ED,wDA6EC","file":"MigrationRevertCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {Connection} from \"../connection/Connection\";\nimport * as yargs from \"yargs\";\nimport chalk from \"chalk\";\n\n/**\n * Reverts last migration command.\n */\nexport class MigrationRevertCommand implements yargs.CommandModule {\n\n    command = \"migration:revert\";\n    describe = \"Reverts last executed migration.\";\n    aliases = \"migrations:revert\";\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which run a query.\"\n            })\n            .option(\"transaction\", {\n                alias: \"t\",\n                default: \"default\",\n                describe: \"Indicates if transaction should be used or not for migration revert. Enabled by default.\"\n            })\n            .option(\"f\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(args: yargs.Arguments) {\n        if (args._[0] === \"migrations:revert\") {\n            console.log(\"'migrations:revert' is deprecated, please use 'migration:revert' instead\");\n        }\n\n        let connection: Connection|undefined = undefined;\n        try {\n            const connectionOptionsReader = new ConnectionOptionsReader({\n                root: process.cwd(),\n                configName: args.config as any\n            });\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n            Object.assign(connectionOptions, {\n                subscribers: [],\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: [\"query\", \"error\", \"schema\"]\n            });\n            connection = await createConnection(connectionOptions);\n\n            const options = {\n                transaction: \"all\" as \"all\" | \"none\" | \"each\",\n            };\n\n            switch (args.t) {\n                case \"all\":\n                    options.transaction = \"all\";\n                    break;\n                case \"none\":\n                case \"false\":\n                    options.transaction = \"none\";\n                    break;\n                case \"each\":\n                    options.transaction = \"each\";\n                    break;\n                default:\n                    // noop\n            }\n\n            await connection.undoLastMigration(options);\n            await connection.close();\n\n        } catch (err) {\n            if (connection) await (connection as Connection).close();\n\n            console.log(chalk.black.bgRed(\"Error during migration revert:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n\n}\n"],"sourceRoot":".."}