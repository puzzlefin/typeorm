{"version":3,"sources":["../../src/commands/MigrationShowCommand.ts"],"names":[],"mappings":";;;;AAAA,oCAA0C;AAC1C,mFAA8E;AAE9E,yDAAmC;AAEnC,0DAA0B;AAE1B;;GAEG;AACH,MAAa,oBAAoB;IAAjC;QAEE,YAAO,GAAG,gBAAgB,CAAC;QAC3B,aAAQ,GAAG,2DAA2D,CAAC;IA+CzE,CAAC;IA7CC,OAAO,CAAC,IAAgB;QACtB,OAAO,IAAI;aACR,MAAM,CAAC,YAAY,EAAE;YACpB,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,8CAA8C;SACzD,CAAC;aACD,MAAM,CAAC,QAAQ,EAAE;YAChB,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC5D,CAAC,CAAC;IACP,CAAC;IAEK,OAAO,CAAC,IAAqB;;YACjC,IAAI,UAAU,GAAyB,SAAS,CAAC;YACjD,IAAI;gBACF,MAAM,uBAAuB,GAAG,IAAI,iDAAuB,CAAC;oBAC1D,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;oBACnB,UAAU,EAAE,IAAI,CAAC,MAAa;iBAC/B,CAAC,CAAC;gBACH,MAAM,iBAAiB,GAAG,MAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAiB,CAAC,CAAC;gBACpF,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;oBAC/B,WAAW,EAAE,EAAE;oBACf,WAAW,EAAE,KAAK;oBAClB,aAAa,EAAE,KAAK;oBACpB,UAAU,EAAE,KAAK;oBACjB,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;iBACtC,CAAC,CAAC;gBACH,UAAU,GAAG,MAAM,IAAA,wBAAgB,EAAC,iBAAiB,CAAC,CAAC;gBACvD,MAAM,mBAAmB,GAAG,MAAM,UAAU,CAAC,cAAc,EAAE,CAAC;gBAC9D,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;gBAEzB,6DAA6D;gBAC7D,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAE3C;YAAC,OAAO,GAAG,EAAE;gBACZ,IAAI,UAAU;oBAAE,MAAO,UAAyB,CAAC,KAAK,EAAE,CAAC;gBAEzD,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;gBAC/D,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACjB;QACH,CAAC;KAAA;CAEF;AAlDD,oDAkDC","file":"MigrationShowCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {Connection} from \"../connection/Connection\";\nimport * as process from \"process\";\nimport * as yargs from \"yargs\";\nimport chalk from \"chalk\";\n\n/**\n * Runs migration command.\n */\nexport class MigrationShowCommand implements yargs.CommandModule {\n\n  command = \"migration:show\";\n  describe = \"Show all migrations and whether they have been run or not\";\n\n  builder(args: yargs.Argv) {\n    return args\n      .option(\"connection\", {\n        alias: \"c\",\n        default: \"default\",\n        describe: \"Name of the connection on which run a query.\"\n      })\n      .option(\"config\", {\n        alias: \"f\",\n        default: \"ormconfig\",\n        describe: \"Name of the file with connection configuration.\"\n      });\n  }\n\n  async handler(args: yargs.Arguments) {\n    let connection: Connection|undefined = undefined;\n    try {\n      const connectionOptionsReader = new ConnectionOptionsReader({\n        root: process.cwd(),\n        configName: args.config as any\n      });\n      const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n      Object.assign(connectionOptions, {\n        subscribers: [],\n        synchronize: false,\n        migrationsRun: false,\n        dropSchema: false,\n        logging: [\"query\", \"error\", \"schema\"]\n      });\n      connection = await createConnection(connectionOptions);\n      const unappliedMigrations = await connection.showMigrations();\n      await connection.close();\n\n      // return error code if there are unapplied migrations for CI\n      process.exit(unappliedMigrations ? 1 : 0);\n\n    } catch (err) {\n      if (connection) await (connection as Connection).close();\n\n      console.log(chalk.black.bgRed(\"Error during migration show:\"));\n      console.error(err);\n      process.exit(1);\n    }\n  }\n\n}\n"],"sourceRoot":".."}