{"version":3,"sources":["../../src/commands/SchemaLogCommand.ts"],"names":[],"mappings":"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","file":"SchemaLogCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {Connection} from \"../connection/Connection\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {highlight} from \"cli-highlight\";\nimport * as yargs from \"yargs\";\nimport chalk from \"chalk\";\n\n/**\n * Shows sql to be executed by schema:sync command.\n */\nexport class SchemaLogCommand implements yargs.CommandModule {\n\n    command = \"schema:log\";\n    describe = \"Shows sql to be executed by schema:sync command. It shows sql log only for your default connection. \" +\n        \"To run update queries on a concrete connection use -c option.\";\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection of which schema sync log should be shown.\"\n            })\n            .option(\"f\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(args: yargs.Arguments) {\n\n        let connection: Connection|undefined = undefined;\n        try {\n\n            const connectionOptionsReader = new ConnectionOptionsReader({\n                root: process.cwd(),\n                configName: args.config as any\n            });\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n            Object.assign(connectionOptions, {\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: false\n            });\n            connection = await createConnection(connectionOptions);\n            const sqlInMemory = await connection.driver.createSchemaBuilder().log();\n            if (sqlInMemory.upQueries.length === 0) {\n                console.log(chalk.yellow(\"Your schema is up to date - there are no queries to be executed by schema syncronization.\"));\n\n            } else {\n                const lengthSeparators = String(sqlInMemory.upQueries.length).split(\"\").map(char => \"-\").join(\"\");\n                console.log(chalk.yellow(\"---------------------------------------------------------------\" + lengthSeparators));\n                console.log(chalk.yellow.bold(`-- Schema syncronization will execute following sql queries (${chalk.white(sqlInMemory.upQueries.length.toString())}):`));\n                console.log(chalk.yellow(\"---------------------------------------------------------------\" + lengthSeparators));\n\n                sqlInMemory.upQueries.forEach(upQuery => {\n                    let sqlString = upQuery.query;\n                    sqlString = sqlString.trim();\n                    sqlString = sqlString.substr(-1) === \";\" ? sqlString : sqlString + \";\";\n                    console.log(highlight(sqlString));\n                });\n            }\n            await connection.close();\n\n        } catch (err) {\n            if (connection)\n\n            console.log(chalk.black.bgRed(\"Error during schema synchronization:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n}\n"],"sourceRoot":".."}