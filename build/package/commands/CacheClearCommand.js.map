{"version":3,"sources":["../../src/commands/CacheClearCommand.ts"],"names":[],"mappings":";;;;AAAA,oCAA0C;AAC1C,mFAA8E;AAG9E,0DAA0B;AAE1B;;GAEG;AACH,MAAa,iBAAiB;IAA9B;QAEI,YAAO,GAAG,aAAa,CAAC;QACxB,aAAQ,GAAG,+CAA+C,CAAC;IAqD/D,CAAC;IAnDG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI;aACN,MAAM,CAAC,YAAY,EAAE;YAClB,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,8CAA8C;SAC3D,CAAC;aACD,MAAM,CAAC,QAAQ,EAAE;YACd,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,OAAO,CAAC,IAAqB;;YAE/B,IAAI,UAAU,GAAyB,SAAS,CAAC;YACjD,IAAI;gBACA,MAAM,uBAAuB,GAAG,IAAI,iDAAuB,CAAC;oBACxD,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;oBACnB,UAAU,EAAE,IAAI,CAAC,MAAa;iBACjC,CAAC,CAAC;gBACH,MAAM,iBAAiB,GAAG,MAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAiB,CAAC,CAAC;gBACpF,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;oBAC7B,WAAW,EAAE,EAAE;oBACf,WAAW,EAAE,KAAK;oBAClB,aAAa,EAAE,KAAK;oBACpB,UAAU,EAAE,KAAK;oBACjB,OAAO,EAAE,CAAC,QAAQ,CAAC;iBACtB,CAAC,CAAC;gBACH,UAAU,GAAG,MAAM,IAAA,wBAAgB,EAAC,iBAAiB,CAAC,CAAC;gBAEvD,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE;oBAC9B,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,KAAK,CAAC,2EAA2E,CAAC,CAAC,CAAC;oBAC5G,OAAO;iBACV;gBAED,MAAM,UAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;gBAC1C,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;gBAE3D,IAAI,UAAU;oBAAE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;aAE5C;YAAC,OAAO,GAAG,EAAE;gBACV,IAAI,UAAU;oBAAE,MAAO,UAAyB,CAAC,KAAK,EAAE,CAAC;gBAEzD,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC;gBAC5D,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACnB;QACL,CAAC;KAAA;CAEJ;AAxDD,8CAwDC","file":"CacheClearCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {Connection} from \"../connection/Connection\";\nimport * as yargs from \"yargs\";\nimport chalk from \"chalk\";\n\n/**\n * Clear cache command.\n */\nexport class CacheClearCommand implements yargs.CommandModule {\n\n    command = \"cache:clear\";\n    describe = \"Clears all data stored in query runner cache.\";\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"connection\", {\n                alias: \"c\",\n                default: \"default\",\n                describe: \"Name of the connection on which run a query.\"\n            })\n            .option(\"config\", {\n                alias: \"f\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(args: yargs.Arguments) {\n\n        let connection: Connection|undefined = undefined;\n        try {\n            const connectionOptionsReader = new ConnectionOptionsReader({\n                root: process.cwd(),\n                configName: args.config as any\n            });\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n            Object.assign(connectionOptions, {\n                subscribers: [],\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: [\"schema\"]\n            });\n            connection = await createConnection(connectionOptions);\n\n            if (!connection.queryResultCache) {\n                console.log(chalk.black.bgRed(\"Cache is not enabled. To use cache enable it in connection configuration.\"));\n                return;\n            }\n\n            await connection.queryResultCache.clear();\n            console.log(chalk.green(\"Cache was successfully cleared\"));\n\n            if (connection) await connection.close();\n\n        } catch (err) {\n            if (connection) await (connection as Connection).close();\n\n            console.log(chalk.black.bgRed(\"Error during cache clear:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n\n}\n"],"sourceRoot":".."}