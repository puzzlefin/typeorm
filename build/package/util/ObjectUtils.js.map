{"version":3,"sources":["../../src/util/ObjectUtils.ts"],"names":[],"mappings":";;;AAAA,MAAa,WAAW;IA4BtB;;;;;OAKG;IACH,MAAM,CAAC,MAAM,CAAC,MAAc,EAAE,GAAG,OAAc;QAC7C,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE;gBAClD,MAAc,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;aACxC;SACF;IACH,CAAC;CACF;AAzCD,kCAyCC","file":"ObjectUtils.js","sourcesContent":["export class ObjectUtils {\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param source The source object from which to copy properties.\n   */\n  static assign<T, U>(target: T, source: U): T & U;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param source1 The first source object from which to copy properties.\n   * @param source2 The second source object from which to copy properties.\n   */\n  static assign<T, U, V>(target: T, source1: U, source2: V): T & U & V;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param source1 The first source object from which to copy properties.\n   * @param source2 The second source object from which to copy properties.\n   * @param source3 The third source object from which to copy properties.\n   */\n  static assign<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param sources One or more source objects from which to copy properties\n   */\n  static assign(target: object, ...sources: any[]): any {\n    for (const source of sources) {\n      for (const prop of Object.getOwnPropertyNames(source)) {\n          (target as any)[prop] = source[prop];\n      }\n    }\n  }\n}"],"sourceRoot":".."}