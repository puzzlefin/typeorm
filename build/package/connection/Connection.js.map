{"version":3,"sources":["../../src/connection/Connection.ts"],"names":[],"mappings":"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","file":"Connection.js","sourcesContent":["import {Driver} from \"../driver/Driver\";\nimport {Repository} from \"../repository/Repository\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\nimport {CannotExecuteNotConnectedError} from \"../error/CannotExecuteNotConnectedError\";\nimport {CannotConnectAlreadyConnectedError} from \"../error/CannotConnectAlreadyConnectedError\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Logger} from \"../logger/Logger\";\nimport {EntityMetadataNotFoundError} from \"../error/EntityMetadataNotFoundError\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\nimport {Migration} from \"../migration/Migration\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\nimport {EntityMetadataValidator} from \"../metadata-builder/EntityMetadataValidator\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport {EntityManagerFactory} from \"../entity-manager/EntityManagerFactory\";\nimport {DriverFactory} from \"../driver/DriverFactory\";\nimport {ConnectionMetadataBuilder} from \"./ConnectionMetadataBuilder\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {LoggerFactory} from \"../logger/LoggerFactory\";\nimport {QueryResultCacheFactory} from \"../cache/QueryResultCacheFactory\";\nimport {QueryResultCache} from \"../cache/QueryResultCache\";\nimport {SqljsEntityManager} from \"../entity-manager/SqljsEntityManager\";\nimport {RelationLoader} from \"../query-builder/RelationLoader\";\nimport {RelationIdLoader} from \"../query-builder/RelationIdLoader\";\nimport {EntitySchema, ObjectLiteral} from \"../\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\nimport {IsolationLevel} from \"../driver/types/IsolationLevel\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport {DriverUtils} from \"../driver/DriverUtils\";\nimport {ReplicationMode} from \"../driver/types/ReplicationMode\";\n\n/**\n * Connection is a single database ORM connection to a specific database.\n * Its not required to be a database connection, depend on database type it can create connection pool.\n * You can have multiple connections to multiple databases in your application.\n */\nexport class Connection {\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     */\n    readonly name: string;\n\n    /**\n     * Connection options.\n     */\n    readonly options: ConnectionOptions;\n\n    /**\n     * Indicates if connection is initialized or not.\n     */\n    readonly isConnected: boolean;\n\n    /**\n     * Database driver used by this connection.\n     */\n    readonly driver: Driver;\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    readonly namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Logger used to log orm events.\n     */\n    readonly logger: Logger;\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = [];\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = [];\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = [];\n\n    /**\n     * Used to work with query result cache.\n     */\n    readonly queryResultCache?: QueryResultCache;\n\n    /**\n     * Used to load relations and work with lazy relations.\n     */\n    readonly relationLoader: RelationLoader;\n\n    /**\n     * Used to load relation ids of specific entity relations.\n     */\n    readonly relationIdLoader: RelationIdLoader;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: ConnectionOptions) {\n        this.name = options.name || \"default\";\n        this.options = options;\n        this.logger = new LoggerFactory().create(this.options.logger, this.options.logging);\n        this.driver = new DriverFactory().create(this);\n        this.manager = this.createEntityManager();\n        this.namingStrategy = options.namingStrategy || new DefaultNamingStrategy();\n        this.queryResultCache = options.cache ? new QueryResultCacheFactory(this).create() : undefined;\n        this.relationLoader = new RelationLoader(this);\n        this.relationIdLoader = new RelationIdLoader(this);\n        this.isConnected = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!(this.manager instanceof MongoEntityManager))\n            throw new Error(`MongoEntityManager is only available for MongoDB databases.`);\n\n        return this.manager as MongoEntityManager;\n    }\n\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get sqljsManager(): SqljsEntityManager {\n        if (!(this.manager instanceof SqljsEntityManager))\n            throw new Error(`SqljsEntityManager is only available for Sqljs databases.`);\n\n        return this.manager as SqljsEntityManager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async connect(): Promise<this> {\n        if (this.isConnected)\n            throw new CannotConnectAlreadyConnectedError(this.name);\n\n        // connect to the database via its driver\n        await this.driver.connect();\n\n        // connect to the cache-specific database if cache is enabled\n        if (this.queryResultCache)\n            await this.queryResultCache.connect();\n\n        // set connected status for the current connection\n        ObjectUtils.assign(this, { isConnected: true });\n\n        try {\n\n            // build all metadatas registered in the current connection\n            this.buildMetadatas();\n\n            await this.driver.afterConnect();\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchema)\n                await this.dropDatabase();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.synchronize)\n                await this.synchronize();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.migrationsRun)\n                await this.runMigrations({ transaction: this.options.migrationsTransactionMode });\n\n        } catch (error) {\n\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.close();\n            throw error;\n        }\n\n        return this;\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async close(): Promise<void> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        await this.driver.disconnect();\n\n        // disconnect from the cache-specific database if cache was enabled\n        if (this.queryResultCache)\n            await this.queryResultCache.disconnect();\n\n        ObjectUtils.assign(this, { isConnected: false });\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async synchronize(dropBeforeSync: boolean = false): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        if (dropBeforeSync)\n            await this.dropDatabase();\n\n        const schemaBuilder = this.driver.createSchemaBuilder();\n        await schemaBuilder.build();\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    async dropDatabase(): Promise<void> {\n        const queryRunner = this.createQueryRunner();\n        try {\n            if (this.driver instanceof SqlServerDriver || this.driver instanceof MysqlDriver || this.driver instanceof AuroraDataApiDriver) {\n                const databases: string[] = this.driver.database ? [this.driver.database] : [];\n                this.entityMetadatas.forEach(metadata => {\n                    if (metadata.database && databases.indexOf(metadata.database) === -1)\n                        databases.push(metadata.database);\n                });\n\n                for (const database of databases) {\n                    await queryRunner.clearDatabase(database);\n                }\n            } else {\n                await queryRunner.clearDatabase();\n            }\n        } finally {\n            await queryRunner.release();\n        }\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(options?: { transaction?: \"all\" | \"none\" | \"each\" }): Promise<Migration[]> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        migrationExecutor.transaction = (options && options.transaction) || \"all\";\n\n        const successMigrations = await migrationExecutor.executePendingMigrations();\n        return successMigrations;\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(options?: { transaction?: \"all\" | \"none\" | \"each\" }): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        migrationExecutor.transaction = (options && options.transaction) || \"all\";\n\n        await migrationExecutor.undoLastMigration();\n    }\n\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are pending migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        if (!this.isConnected) {\n            throw new CannotExecuteNotConnectedError(this.name);\n        }\n        const migrationExecutor = new MigrationExecutor(this);\n        return await migrationExecutor.showMigrations();\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: EntityTarget<any>): boolean {\n        return !!this.findMetadata(target);\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: EntityTarget<any>): EntityMetadata {\n        const metadata = this.findMetadata(target);\n        if (!metadata)\n            throw new EntityMetadataNotFoundError(target);\n\n        return metadata;\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity extends ObjectLiteral>(target: EntityTarget<Entity>): Repository<Entity> {\n        return this.manager.getRepository(target);\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(target: EntityTarget<Entity>): TreeRepository<Entity> {\n        return this.manager.getTreeRepository(target);\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(target: EntityTarget<Entity>): MongoRepository<Entity> {\n        if (!(this.driver instanceof MongoDriver))\n            throw new Error(`You can use getMongoRepository only for MongoDB connections.`);\n\n        return this.manager.getRepository(target) as any;\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository);\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n    async transaction<T>(isolationLevel: IsolationLevel, runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n    async transaction<T>(\n        isolationOrRunInTransaction: IsolationLevel | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>\n    ): Promise<any> {\n        return this.manager.transaction(\n            isolationOrRunInTransaction as any,\n            runInTransactionParam as any\n        );\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[], queryRunner?: QueryRunner): Promise<any> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Queries aren't supported by MongoDB.`);\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner();\n\n        try {\n            return await usedQueryRunner.query(query, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            if (!queryRunner)\n                await usedQueryRunner.release();\n        }\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(entityClass: EntityTarget<Entity>, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(entityOrRunner?: EntityTarget<Entity>|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Query Builder is not supported by MongoDB.`);\n\n        if (alias) {\n            const metadata = this.getMetadata(entityOrRunner as EntityTarget<Entity>);\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias);\n\n        } else {\n            return new SelectQueryBuilder(this, entityOrRunner as QueryRunner|undefined);\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    createQueryRunner(mode: ReplicationMode = \"master\"): QueryRunner {\n        const queryRunner = this.driver.createQueryRunner(mode);\n        const manager = this.createEntityManager(queryRunner);\n        Object.assign(queryRunner, { manager: manager });\n        return queryRunner;\n    }\n\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    getManyToManyMetadata(entityTarget: EntityTarget<any>, relationPropertyPath: string) {\n        const relationMetadata = this.getMetadata(entityTarget).findRelationWithPropertyPath(relationPropertyPath);\n        if (!relationMetadata)\n            throw new Error(`Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`);\n        if (!relationMetadata.isManyToMany)\n            throw new Error(`Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\n                `You can use this method only on many-to-many relations.`);\n\n        return relationMetadata.junctionEntityMetadata;\n    }\n\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    createEntityManager(queryRunner?: QueryRunner): EntityManager {\n        return new EntityManagerFactory().create(this, queryRunner);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    /*\n    protected findMetadata(target: EntityTarget<any>): EntityMetadata|undefined {\n        return this.entityMetadatas.find(metadata => {\n            if (metadata.target === target)\n                return true;\n            if (target instanceof EntitySchema) {\n                return metadata.name === target.options.name;\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    return metadata.tablePath === target;\n                } else {\n                    return metadata.name === target || metadata.tableName === target;\n                }\n            }\n\n            return false;\n        });\n    }\n    */\n    protected findMetadata(target: Function|EntityTarget<any>|string): EntityMetadata|undefined {\n        return this.entityMetadatas.find(metadata => {\n            if (typeof metadata.target === \"function\" && typeof target === \"function\" && metadata.target.name === target.name) {\n                return true;\n            }\n            if (metadata.target === target) {\n                return true;\n            }\n            if (typeof target === \"function\" && (metadata.name === (target as Function).name)) {\n               return true;\n            }\n            if (target instanceof EntitySchema) {\n                return metadata.name === target.options.name;\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    return metadata.tablePath === target;\n                } else {\n                    return metadata.name === target || metadata.tableName === target;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected buildMetadatas(): void {\n\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this);\n        const entityMetadataValidator = new EntityMetadataValidator();\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        const subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);\n        ObjectUtils.assign(this, { subscribers: subscribers });\n\n        // build entity metadatas\n        const entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || []);\n        ObjectUtils.assign(this, { entityMetadatas: entityMetadatas });\n\n        // create migration instances\n        const migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);\n        ObjectUtils.assign(this, { migrations: migrations });\n\n        this.driver.database = this.getDatabaseName();\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(this.entityMetadatas.filter(metadata => metadata.tableType !== \"view\"), this.driver);\n    }\n\n    // This database name property is nested for replication configs.\n    protected getDatabaseName(): string {\n        const options = this.options;\n        switch (options.type) {\n            case \"mysql\" :\n            case \"mariadb\" :\n            case \"postgres\":\n            case \"cockroachdb\":\n            case \"mssql\":\n            case \"oracle\":\n                return DriverUtils.buildDriverOptions(options.replication ? options.replication.master : options).database;\n            case \"mongodb\":\n                return DriverUtils.buildMongoDBDriverOptions(options).database;\n            default:\n                return DriverUtils.buildDriverOptions(options).database;\n    }\n}\n\n}\n"],"sourceRoot":".."}