{"version":3,"sources":["../../src/driver/sap/SapQueryRunner.ts"],"names":[],"mappings":"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","file":"SapQueryRunner.js","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnType, QueryFailedError} from \"../../index\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Query} from \"../Query\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {SapDriver} from \"./SapDriver\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SapQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SapDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because we cannot rely on parallel queries because we use second query\n     * to select CURRENT_IDENTITY_VALUE()\n     */\n    protected queryResponsibilityChain: Promise<any>[] = [];\n\n    /**\n     * Promise used to obtain a database connection from a pool for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SapDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    async connect(): Promise<any> {\n        if (this.databaseConnection)\n            return this.databaseConnection;\n\n        this.databaseConnection = await this.driver.obtainMasterConnection();\n\n        return this.databaseConnection;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n\n        if (this.databaseConnection) {\n            return this.driver.master.release(this.databaseConnection);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = true;\n        if (isolationLevel) {\n            await this.query(`SET TRANSACTION ISOLATION LEVEL ${isolationLevel || \"\"}`);\n        }\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise(async (ok, fail) => {\n           try {\n               const databaseConnection = await this.connect();\n               // we disable autocommit because ROLLBACK does not work in autocommit mode\n               databaseConnection.setAutoCommit(!this.isTransactionActive);\n               this.driver.connection.logger.logQuery(query, parameters, this);\n               const queryStartTime = +new Date();\n               const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n\n               const statement = databaseConnection.prepare(query);\n               statement.exec(parameters, (err: any, result: any) => {\n\n                   // log slow queries if maxQueryExecution time is set\n                   const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                   const queryEndTime = +new Date();\n                   const queryExecutionTime = queryEndTime - queryStartTime;\n                   if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                       this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                   const resolveChain = () => {\n                       if (promiseIndex !== -1)\n                           this.queryResponsibilityChain.splice(promiseIndex, 1);\n                       if (waitingPromiseIndex !== -1)\n                           this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                       waitingOkay();\n                   };\n\n                   let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                   let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                   if (err) {\n                       this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                       resolveChain();\n                       return fail(new QueryFailedError(query, parameters, err));\n\n                   } else {\n                       if (isInsertQuery) {\n                           const lastIdQuery = `SELECT CURRENT_IDENTITY_VALUE() FROM \"SYS\".\"DUMMY\"`;\n                           this.driver.connection.logger.logQuery(lastIdQuery, [], this);\n                           databaseConnection.exec(lastIdQuery, (err: any, result: { \"CURRENT_IDENTITY_VALUE()\": number }[]) => {\n                               if (err) {\n                                   this.driver.connection.logger.logQueryError(err, lastIdQuery, [], this);\n                                   resolveChain();\n                                   fail(new QueryFailedError(lastIdQuery, [], err));\n                                   return;\n                               }\n                               ok(result[0][\"CURRENT_IDENTITY_VALUE()\"]);\n                               resolveChain();\n                           });\n                       } else {\n                           ok(result);\n                           resolveChain();\n                       }\n                   }\n               });\n           } catch (err) {\n                fail(err);\n            }\n        });\n\n        // with this condition, Promise.all causes unexpected behavior.\n        // if (this.isTransactionActive)\n        this.queryResponsibilityChain.push(promise);\n        return promise;\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by SAP driver.`);\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`SELECT DATABASE_NAME FROM \"SYS\".\"M_DATABASES\"`);\n        return results.map(result => result[\"DATABASE_NAME\"]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database ? `SELECT * FROM \"${database}\".\"SYS\".\"SCHEMAS\"` : `SELECT * FROM \"SYS\".\"SCHEMAS\"`;\n        const results: ObjectLiteral[] = await this.query(query);\n        return results.map(result => result[\"SCHEMA_NAME\"]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const databases = await this.getDatabases();\n        return databases.indexOf(database) !== -1;\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const schemas = await this.getSchemas();\n        return schemas.indexOf(schema) !== -1;\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" = ${parsedTableName.schema} AND \"TABLE_NAME\" = ${parsedTableName.tableName}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE \"SCHEMA_NAME\" = ${parsedTableName.schema} AND \"TABLE_NAME\" = ${parsedTableName.tableName} AND \"COLUMN_NAME\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\n        let exist = false;\n        if (ifNotExist) {\n            const result = await this.query(`SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '${schema}'`);\n            exist = !!result.length;\n        }\n        if (!ifNotExist || (ifNotExist && !exist)) {\n            const up = `CREATE SCHEMA \"${schema}\"`;\n            const down = `DROP SCHEMA \"${schema}\" CASCADE`;\n            await this.executeQueries(new Query(up), new Query(down));\n        }\n    }\n\n    /**\n     * Drops table schema\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean, isCascade?: boolean): Promise<void> {\n        const schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n        let exist = false;\n        if (ifExist) {\n            const result = await this.query(`SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '${schema}'`);\n            exist = !!result.length;\n        }\n        if (!ifExist || (ifExist && exist)) {\n            const up = `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`;\n            const down = `CREATE SCHEMA \"${schema}\"`;\n            await this.executeQueries(new Query(up), new Query(down));\n        }\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        const oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n        const schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n        newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;\n\n        // rename table\n        upQueries.push(new Query(`RENAME TABLE ${this.escapePath(oldTable.name)} TO ${this.escapePath(newTableName)}`));\n        downQueries.push(new Query(`RENAME TABLE ${this.escapePath(newTable.name)} TO ${this.escapePath(oldTableName)}`));\n\n        // drop old FK's. Foreign keys must be dropped before the primary keys are dropped\n        newTable.foreignKeys.forEach(foreignKey => {\n            upQueries.push(this.dropForeignKeySql(newTable, foreignKey));\n            downQueries.push(this.createForeignKeySql(newTable, foreignKey));\n        });\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = '${schemaName}' AND \"REFERENCED_TABLE_NAME\" = '${oldTableName}'`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: newTable.name, // we use renamed table name\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n            const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // drop old PK\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP CONSTRAINT \"${oldPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} ADD CONSTRAINT \"${oldPkName}\" PRIMARY KEY (${columnNamesString})`));\n\n            // create new PK\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} ADD CONSTRAINT \"${newPkName}\" PRIMARY KEY (${columnNamesString})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP CONSTRAINT \"${newPkName}\"`));\n        }\n\n        // recreate foreign keys with new constraint names\n        newTable.foreignKeys.forEach(foreignKey => {\n            // replace constraint name\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n            // create new FK's\n            upQueries.push(this.createForeignKeySql(newTable, foreignKey));\n            downQueries.push(this.dropForeignKeySql(newTable, foreignKey));\n        });\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // drop old index\n            upQueries.push(this.dropIndexSql(newTable, index));\n            downQueries.push(this.createIndexSql(newTable, index));\n\n            // replace constraint name\n            index.name = newIndexName;\n\n            // create new index\n            upQueries.push(this.createIndexSql(newTable, index));\n            downQueries.push(this.dropIndexSql(newTable, index));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(this.addColumnSql(table, column)));\n        downQueries.push(new Query(this.dropColumnSql(table, column)));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n                // To avoid this, we must drop all referential foreign keys and recreate them later\n                const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n                const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n                let referencedForeignKeys: TableForeignKey[] = [];\n                const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n                if (dbForeignKeys.length > 0) {\n                    referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                        const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                        referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                            columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                            referencedTableName: table.name,\n                            referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                            onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                            onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                        });\n                    });\n\n                    // drop referenced foreign keys\n                    referencedForeignKeys.forEach(foreignKey => {\n                        const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                        upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                        downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                    });\n                }\n\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n                // restore referenced foreign keys\n                referencedForeignKeys.forEach(foreignKey => {\n                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                    upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                    downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                });\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n\n        } else if (column.isUnique) {\n            const uniqueIndex = new TableIndex({\n                name: this.connection.namingStrategy.indexName(table.name, [column.name]),\n                columnNames: [column.name],\n                isUnique: true\n            });\n            clonedTable.indices.push(uniqueIndex);\n            clonedTable.uniques.push(new TableUnique({\n                name: uniqueIndex.name,\n                columnNames: uniqueIndex.columnNames\n            }));\n            upQueries.push(this.createIndexSql(table, uniqueIndex));\n            downQueries.push(this.dropIndexSql(table, uniqueIndex));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n\n                // rename column\n                upQueries.push(new Query(`RENAME COLUMN ${this.escapePath(table)}.\"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`RENAME COLUMN ${this.escapePath(table)}.\"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n                    const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                    // drop old PK\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${oldPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${oldPkName}\" PRIMARY KEY (${columnNamesString})`));\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // create new PK\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${newPkName}\" PRIMARY KEY (${columnNamesString})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${newPkName}\"`));\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // drop old index\n                    upQueries.push(this.dropIndexSql(clonedTable, index));\n                    downQueries.push(this.createIndexSql(clonedTable, index));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n\n                    // create new index\n                    upQueries.push(this.createIndexSql(clonedTable, index));\n                    downQueries.push(this.dropIndexSql(clonedTable, index));\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                    upQueries.push(this.dropForeignKeySql(clonedTable, foreignKey));\n                    downQueries.push(this.createForeignKeySql(clonedTable, foreignKey));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n\n                    // create new FK's\n                    upQueries.push(this.createForeignKeySql(clonedTable, foreignKey));\n                    downQueries.push(this.dropForeignKeySql(clonedTable, foreignKey));\n                });\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach(check => {\n                    // build new constraint name\n                    check.columnNames!.splice(check.columnNames!.indexOf(oldColumn.name), 1);\n                    check.columnNames!.push(newColumn.name);\n                    const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression!);\n\n                    upQueries.push(this.dropCheckConstraintSql(clonedTable, check));\n                    downQueries.push(this.createCheckConstraintSql(clonedTable, check));\n\n                    // replace constraint name\n                    check.name = newCheckName;\n\n                    upQueries.push(this.createCheckConstraintSql(clonedTable, check));\n                    downQueries.push(this.dropCheckConstraintSql(clonedTable, check));\n                });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn)) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (${this.buildCreateColumnSql(newColumn)})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (${this.buildCreateColumnSql(oldColumn)})`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueIndex = new TableIndex({\n                        name: this.connection.namingStrategy.indexName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name],\n                        isUnique: true\n                    });\n                    clonedTable.indices.push(uniqueIndex);\n                    clonedTable.uniques.push(new TableUnique({\n                        name: uniqueIndex.name,\n                        columnNames: uniqueIndex.columnNames\n                    }));\n                    upQueries.push(this.createIndexSql(table, uniqueIndex));\n                    downQueries.push(this.dropIndexSql(table, uniqueIndex));\n\n                } else {\n                    const uniqueIndex = clonedTable.indices.find(index => {\n                        return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex!), 1);\n\n                    const tableUnique = clonedTable.uniques.find(unique => unique.name === uniqueIndex!.name);\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique!), 1);\n\n                    upQueries.push(this.dropIndexSql(table, uniqueIndex!));\n                    downQueries.push(this.createIndexSql(table, uniqueIndex!));\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${newColumn.name}\" ${this.connection.driver.createFullType(newColumn)} DEFAULT ${newColumn.default})`));\n\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT ${oldColumn.default})`));\n                    } else {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT NULL)`));\n                    }\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${newColumn.name}\" ${this.connection.driver.createFullType(newColumn)} DEFAULT NULL)`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT ${oldColumn.default})`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n            // To avoid this, we must drop all referential foreign keys and recreate them later\n            const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n            const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n            let referencedForeignKeys: TableForeignKey[] = [];\n            const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n            if (dbForeignKeys.length > 0) {\n                referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                    referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                    return new TableForeignKey({\n                        name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                        columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                        referencedTableName: table.name,\n                        referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                        onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                        onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                    });\n                });\n\n                // drop referenced foreign keys\n                referencedForeignKeys.forEach(foreignKey => {\n                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                    upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                    downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                });\n            }\n\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n\n            // restore referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n\n        } else if (column.isUnique) {\n            // we splice constraints both from table uniques and indices.\n            const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]);\n            const foundUnique = clonedTable.uniques.find(unique => unique.name === uniqueName);\n            if (foundUnique) {\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);\n                upQueries.push(this.dropIndexSql(table, uniqueName));\n                downQueries.push(new Query(`CREATE UNIQUE INDEX \"${uniqueName}\" ON ${this.escapePath(table)} (\"${column.name}\")`));\n            }\n\n            const indexName = this.connection.namingStrategy.indexName(table.name, [column.name]);\n            const foundIndex = clonedTable.indices.find(index => index.name === indexName);\n            if (foundIndex) {\n                clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);\n                upQueries.push(this.dropIndexSql(table, indexName));\n                downQueries.push(new Query(`CREATE UNIQUE INDEX \"${indexName}\" ON ${this.escapePath(table)} (\"${column.name}\")`));\n            }\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        upQueries.push(new Query(this.dropColumnSql(table, column)));\n        downQueries.push(new Query(this.addColumnSql(table, column)));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: table.name,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: table.name,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        upQueries.push(this.dropPrimaryKeySql(table));\n        downQueries.push(this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name)));\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        const schemas: string[] = [];\n        this.connection.entityMetadatas\n            .filter(metadata => metadata.schema)\n            .forEach(metadata => {\n                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);\n                if (!isSchemaExist)\n                    schemas.push(metadata.schema!);\n            });\n\n        schemas.push(this.driver.options.schema || \"current_schema\");\n        const schemaNamesString = schemas.map(name => {\n            return name === \"current_schema\" ? name : \"'\" + name + \"'\";\n        }).join(\", \");\n\n        await this.startTransaction();\n        try {\n            // const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" ` +\n            //     `FROM \"pg_views\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"viewname\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')`;\n            // const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);\n            // await Promise.all(dropViewQueries.map(q => this.query(q[\"query\"])));\n\n            // ignore spatial_ref_sys; it's a special table supporting PostGIS\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || schema_name || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" IN (${schemaNamesString}) AND \"TABLE_NAME\" NOT IN ('SYS_AFL_GENERATOR_PARAMETERS') AND \"IS_COLUMN_TABLE\" = 'TRUE'`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(selectTableDropsQuery);\n            await Promise.all(dropTableQueries.map(q => this.query(q[\"query\"])));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Return current database.\n     */\n    protected async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT \"VALUE\" AS \"db_name\" FROM \"SYS\".\"M_SYSTEM_OVERVIEW\" WHERE \"SECTION\" = 'System' and \"NAME\" = 'Instance ID'`);\n        return currentDBQuery[0][\"db_name\"];\n    }\n\n    /**\n     * Return current schema.\n     */\n    protected async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(`SELECT CURRENT_SCHEMA AS \"schema_name\" FROM \"SYS\".\"DUMMY\"`);\n        return currentSchemaQuery[0][\"schema_name\"];\n    }\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const currentSchema = await this.getCurrentSchema();\n\n        const viewsCondition = viewNames.map(viewName => {\n            let [schema, name] = viewName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = `SELECT \"t\".* FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" WHERE \"t\".\"type\" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const currentSchema = await this.getCurrentSchema();\n        const tablesCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"SCHEMA_NAME\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n        const tablesSql = `SELECT * FROM \"SYS\".\"TABLES\" WHERE ` + tablesCondition;\n        const columnsSql = `SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE ` + tablesCondition + ` ORDER BY \"POSITION\"`;\n\n        const constraintsCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"SCHEMA_NAME\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const constraintsSql = `SELECT * FROM \"SYS\".\"CONSTRAINTS\" WHERE (${constraintsCondition}) ORDER BY \"POSITION\"`;\n\n        const indicesCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"I\".\"SCHEMA_NAME\" = '${schema}' AND \"I\".\"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n        // excluding primary key and autogenerated fulltext indices\n        const indicesSql = `SELECT \"I\".\"INDEX_TYPE\", \"I\".\"SCHEMA_NAME\", \"I\".\"TABLE_NAME\", \"I\".\"INDEX_NAME\", \"IC\".\"COLUMN_NAME\", \"I\".\"CONSTRAINT\" ` +\n            `FROM \"SYS\".\"INDEXES\" \"I\" INNER JOIN \"SYS\".\"INDEX_COLUMNS\" \"IC\" ON \"IC\".\"INDEX_OID\" = \"I\".\"INDEX_OID\" ` +\n            `WHERE (${indicesCondition}) AND (\"I\".\"CONSTRAINT\" IS NULL OR \"I\".\"CONSTRAINT\" != 'PRIMARY KEY') AND \"I\".\"INDEX_NAME\" NOT LIKE '%_SYS_FULLTEXT_%' ORDER BY \"IC\".\"POSITION\"`;\n\n        const foreignKeysCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"SCHEMA_NAME\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n        const foreignKeysSql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE (${foreignKeysCondition}) ORDER BY \"POSITION\"`;\n        const [dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n\n            // We do not need to join schema name, when database is by default.\n            // In this case we need local variable `tableFullName` for below comparision.\n            const schema = dbTable[\"SCHEMA_NAME\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"SCHEMA_NAME\"];\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema);\n            const tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"SCHEMA_NAME\"]);\n\n            // create columns from the loaded columns\n            table.columns = await Promise.all(dbColumns\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"SCHEMA_NAME\"]) === tableFullName)\n                .map(async dbColumn => {\n\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\n                        return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"SCHEMA_NAME\"]) === tableFullName && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const columnUniqueIndex = dbIndices.find(dbIndex => {\n                        const indexTableFullName = this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"SCHEMA_NAME\"]);\n                        if (indexTableFullName !== tableFullName) {\n                            return false;\n                        }\n\n                        // Index is not for this column\n                        if (dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"]) {\n                            return false;\n                        }\n\n                        return dbIndex[\"CONSTRAINT\"] && dbIndex[\"CONSTRAINT\"].indexOf(\"UNIQUE\") !== -1;\n                    });\n\n                    const tableMetadata = this.connection.entityMetadatas.find(metadata => metadata.tablePath === table.name);\n                    const hasIgnoredIndex = columnUniqueIndex && tableMetadata && tableMetadata.indices\n                        .some(index => index.name === columnUniqueIndex[\"INDEX_NAME\"] && index.synchronize === false);\n\n                    const isConstraintComposite = columnUniqueIndex\n                        ? !!dbIndices.find(dbIndex => dbIndex[\"INDEX_NAME\"] === columnUniqueIndex[\"INDEX_NAME\"] && dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\n                        : false;\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE_NAME\"].toLowerCase();\n\n                    if (tableColumn.type === \"dec\" || tableColumn.type === \"decimal\") {\n                        // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                        // we set 'undefined' in to unspecified property to avoid changing column on sync\n                        if (dbColumn[\"LENGTH\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"LENGTH\"])) {\n                            tableColumn.precision = dbColumn[\"LENGTH\"];\n                        } else if (dbColumn[\"SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"SCALE\"])) {\n                            tableColumn.precision = undefined;\n                        }\n                        if (dbColumn[\"SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"SCALE\"])) {\n                            tableColumn.scale = dbColumn[\"SCALE\"];\n                        } else if (dbColumn[\"LENGTH\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"LENGTH\"])) {\n                            tableColumn.scale = undefined;\n                        }\n                    }\n\n                    if (dbColumn[\"DATA_TYPE_NAME\"].toLowerCase() === \"array\") {\n                        tableColumn.isArray = true;\n                        tableColumn.type = dbColumn[\"CS_DATA_TYPE_NAME\"].toLowerCase();\n                    }\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"LENGTH\"]) {\n                        const length = dbColumn[\"LENGTH\"].toString();\n                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                    }\n                    tableColumn.isUnique = !!columnUniqueIndex && !hasIgnoredIndex && !isConstraintComposite;\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"TRUE\";\n                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint[\"IS_PRIMARY_KEY\"] === \"TRUE\");\n                    tableColumn.isGenerated = dbColumn[\"GENERATION_TYPE\"] === \"ALWAYS AS IDENTITY\";\n                    if (tableColumn.isGenerated)\n                        tableColumn.generationStrategy = \"increment\";\n\n                    if (dbColumn[\"DEFAULT_VALUE\"] === null\n                        || dbColumn[\"DEFAULT_VALUE\"] === undefined) {\n                        tableColumn.default = undefined;\n\n                    } else {\n                        if (tableColumn.type === \"char\" || tableColumn.type === \"nchar\" || tableColumn.type === \"varchar\" ||\n                            tableColumn.type === \"nvarchar\" || tableColumn.type === \"alphanum\" || tableColumn.type === \"shorttext\") {\n                            tableColumn.default = `'${dbColumn[\"DEFAULT_VALUE\"]}'`;\n                        } else if (tableColumn.type === \"boolean\") {\n                            tableColumn.default = dbColumn[\"DEFAULT_VALUE\"] === \"1\" ? \"true\" : \"false\";\n                        } else {\n                            tableColumn.default = dbColumn[\"DEFAULT_VALUE\"];\n                        }\n                    }\n                    tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                    if (dbColumn[\"character_set_name\"])\n                        tableColumn.charset = dbColumn[\"character_set_name\"];\n                    if (dbColumn[\"collation_name\"])\n                        tableColumn.collation = dbColumn[\"collation_name\"];\n                    return tableColumn;\n                }));\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"SCHEMA_NAME\"]) === tableFullName\n                    && dbConstraint[\"CHECK_CONDITION\"] !== null && dbConstraint[\"CHECK_CONDITION\"] !== undefined;\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"CHECK_CONDITION\"],\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"SCHEMA_NAME\"]) === tableFullName;\n            }), dbForeignKey => dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n                const schema = dbForeignKey[\"REFERENCED_SCHEMA_NAME\"] === currentSchema ? undefined : dbForeignKey[\"REFERENCED_SCHEMA_NAME\"];\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REFERENCED_TABLE_NAME\"], schema);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n                return this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"SCHEMA_NAME\"]) === tableFullName;\n            }), dbIndex => dbIndex[\"INDEX_NAME\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => {\n                    return index[\"SCHEMA_NAME\"] === constraint[\"SCHEMA_NAME\"]\n                        && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"]\n                        && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                });\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\n                    isUnique: constraint[\"CONSTRAINT\"] && constraint[\"CONSTRAINT\"].indexOf(\"UNIQUE\") !== -1,\n                    isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\"\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        // we create unique indexes instead of unique constraints, because SAP HANA does not have unique constraints.\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueIndexExist = table.indices.some(index => {\n                    return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;\n                });\n                const isUniqueConstraintExist = table.uniques.some(unique => {\n                    return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;\n                });\n                if (!isUniqueIndexExist && !isUniqueConstraintExist)\n                    table.indices.push(new TableIndex({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name],\n                        isUnique: true\n                    }));\n            });\n\n        // as SAP HANA does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n        if (table.uniques.length > 0) {\n            table.uniques.forEach(unique => {\n                const uniqueExist = table.indices.some(index => index.name === unique.name);\n                if (!uniqueExist) {\n                    table.indices.push(new TableIndex({\n                        name: unique.name,\n                        columnNames: unique.columnNames,\n                        isUnique: true\n                    }));\n                }\n            });\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\n                // SAP HANA does not have \"NO ACTION\" option for FK's\n                if (fk.onDelete) {\n                    const onDelete = fk.onDelete === \"NO ACTION\" ? \"RESTRICT\" : fk.onDelete;\n                    constraint += ` ON DELETE ${onDelete}`;\n                }\n                if (fk.onUpdate) {\n                    const onUpdate = fk.onUpdate === \"NO ACTION\" ? \"RESTRICT\" : fk.onUpdate;\n                    constraint += ` ON UPDATE ${onUpdate}`;\n                }\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const splittedName = view.name.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = view.name;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", schema: schema, name: name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        const splittedName = viewName.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = viewName;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    protected addColumnSql(table: Table, column: TableColumn): string {\n        return `ALTER TABLE ${this.escapePath(table)} ADD (${this.buildCreateColumnSql(column)})`;\n    }\n\n    protected dropColumnSql(table: Table, column: TableColumn): string {\n        return `ALTER TABLE ${this.escapePath(table)} DROP (\"${column.name}\")`;\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        let indexType = \"\";\n        if (index.isUnique) {\n            indexType += \"UNIQUE \";\n        }\n        if (index.isFulltext) {\n            indexType += \"FULLTEXT \";\n        }\n\n        return new Query(`CREATE ${indexType}INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        const parsedTableName = this.parseTableName(table);\n        if (parsedTableName.schema === \"current_schema\") {\n            return new Query(`DROP INDEX \"${indexName}\"`);\n        } else {\n            return new Query(`DROP INDEX \"${parsedTableName.schema.replace(/'/g, \"\")}\".\"${indexName}\"`);\n        }\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(tableOrName: Table|string, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(tableOrName)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\n\n        // SAP HANA does not have \"NO ACTION\" option for FK's\n        if (foreignKey.onDelete) {\n            const onDelete = foreignKey.onDelete === \"NO ACTION\" ? \"RESTRICT\" : foreignKey.onDelete;\n            sql += ` ON DELETE ${onDelete}`;\n        }\n        if (foreignKey.onUpdate) {\n            const onUpdate = foreignKey.onUpdate === \"NO ACTION\" ? \"RESTRICT\" : foreignKey.onUpdate;\n            sql += ` ON UPDATE ${onUpdate}`;\n        }\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(tableOrName)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Escapes given table or view path.\n     */\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\n        let tableName = target instanceof Table || target instanceof View ? target.name : target;\n        tableName = tableName.indexOf(\".\") === -1 && this.driver.options.schema ? `${this.driver.options.schema}.${tableName}` : tableName;\n\n        return tableName.split(\".\").map(i => {\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    /**\n     * Returns object with table schema and table name.\n     */\n    protected parseTableName(target: Table|string) {\n        const tableName = target instanceof Table ? target.name : target;\n        if (tableName.indexOf(\".\") === -1) {\n            return {\n                schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : \"current_schema\",\n                tableName: `'${tableName}'`\n            };\n        } else {\n            return {\n                schema: `'${tableName.split(\".\")[0]}'`,\n                tableName: `'${tableName.split(\".\")[1]}'`\n            };\n        }\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(fkName: string, schemaName: string|undefined, dbName: string|undefined): string {\n        let joinedFkName = fkName;\n        if (schemaName)\n            joinedFkName = schemaName + \".\" + joinedFkName;\n        if (dbName)\n            joinedFkName = dbName + \".\" + joinedFkName;\n\n        return joinedFkName;\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: any): any {\n        if (defaultValue.substr(0, 1) !== \"(\")\n            return defaultValue;\n        const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n        return this.removeParenthesisFromDefault(normalizedDefault);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn) {\n        let c = `\"${column.name}\" ` + this.connection.driver.createFullType(column);\n        if (column.charset)\n            c += \" CHARACTER SET \" + column.charset;\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL\n            c += \" DEFAULT \" + column.default;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\")\n            c += \" GENERATED ALWAYS AS IDENTITY\";\n\n        return c;\n    }\n\n}\n"],"sourceRoot":"../.."}