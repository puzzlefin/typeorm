{"version":3,"sources":["../../src/driver/better-sqlite3/BetterSqlite3Driver.ts"],"names":[],"mappings":"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","file":"BetterSqlite3Driver.js","sourcesContent":["import mkdirp from 'mkdirp';\nimport path from 'path';\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { Connection } from \"../../connection/Connection\";\nimport { ColumnType } from \"../types/ColumnTypes\";\nimport { QueryRunner } from \"../../query-runner/QueryRunner\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { BetterSqlite3ConnectionOptions } from \"./BetterSqlite3ConnectionOptions\";\nimport { BetterSqlite3QueryRunner } from \"./BetterSqlite3QueryRunner\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport class BetterSqlite3Driver extends AbstractSqliteDriver {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: BetterSqlite3ConnectionOptions;\n\n    /**\n     * SQLite underlying library.\n     */\n    sqlite: any;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.connection = connection;\n        this.options = connection.options as BetterSqlite3ConnectionOptions;\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined;\n        this.databaseConnection.close();\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new BetterSqlite3QueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number | null, scale?: number }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\";\n        }\n\n        return super.normalizeType(column);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        // not to create database directory if is in memory\n        if (this.options.database !== \":memory:\")\n            await this.createDatabaseDirectory(this.options.database);\n\n        const {\n            database,\n            readonly = false,\n            fileMustExist = false,\n            timeout = 5000,\n            verbose = null,\n            prepareDatabase\n        } = this.options;\n        const databaseConnection = this.sqlite(database, { readonly, fileMustExist, timeout, verbose });\n\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        databaseConnection.exec(`PRAGMA foreign_keys = ON`);\n\n        // turn on WAL mode to enhance performance\n        databaseConnection.exec(`PRAGMA journal_mode = WAL`);\n\n        // in the options, if encryption key for SQLCipher is setted.\n        if (this.options.key) {\n            databaseConnection.exec(`PRAGMA key = ${JSON.stringify(this.options.key)}`);\n        }\n\n        if (typeof prepareDatabase === \"function\") {\n            prepareDatabase(databaseConnection);\n        }\n\n        return databaseConnection;\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = PlatformTools.load(\"better-sqlite3\");\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"better-sqlite3\");\n        }\n    }\n\n    /**\n     * Auto creates database directory if it does not exist.\n     */\n    protected async createDatabaseDirectory(fullPath: string): Promise<void> {\n        await mkdirp(path.dirname(fullPath));\n    }\n\n}\n"],"sourceRoot":"../.."}