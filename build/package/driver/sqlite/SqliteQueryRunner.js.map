{"version":3,"sources":["../../src/driver/sqlite/SqliteQueryRunner.ts"],"names":[],"mappings":"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","file":"SqliteQueryRunner.js","sourcesContent":["import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {SqliteConnectionOptions} from \"./SqliteConnectionOptions\";\nimport {SqliteDriver} from \"./SqliteDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport { ConnectionIsNotSetError } from '../../error/ConnectionIsNotSetError';\n\n/**\n * Runs queries on a single sqlite database connection.\n *\n * Does not support compose primary keys with autoincrement field.\n * todo: need to throw exception for this case.\n */\nexport class SqliteQueryRunner extends AbstractSqliteQueryRunner {\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqliteDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqliteDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const connection = this.driver.connection;\n        const options = connection.options as SqliteConnectionOptions;\n\n        if (!connection.isConnected){\n            throw new ConnectionIsNotSetError('sqlite')\n        }\n\n        return new Promise<any[]>(async (ok, fail) => {\n\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n\n            const execute = async () => {\n                if (isInsertQuery) {\n                    databaseConnection.run(query, parameters, handler);\n                } else {\n                    databaseConnection.all(query, parameters, handler);\n                }\n            };\n\n            const handler = function (err: any, result: any) {\n                if (err && err.toString().indexOf(\"SQLITE_BUSY:\") !== -1) {\n                    if (typeof options.busyErrorRetry === \"number\" && options.busyErrorRetry > 0) {\n                        setTimeout(execute, options.busyErrorRetry);\n                        return;\n                    }\n                }\n\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                if (err) {\n                    connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                } else {\n                    ok(isInsertQuery ? this[\"lastID\"] : result);\n                }\n            };\n\n            await execute();\n        });\n    }\n}\n"],"sourceRoot":"../.."}